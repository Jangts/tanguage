let b = 1
if(1){
    let block = 'a';
    let b = 'b';
    if(1){
        let block = 'b';
        if(0){
            let block = 'c';
        }

        fn1(){
            let a = block_2;
        }

        fn2(block){
            let b = block;
        }

        each ([] as index, block) {
            let b = block;
            if(b){
                let block = 1;
            }
        }

        fn3(c){
            let a = c;
            let block = b;
        }
    }
}
markPosition(string, sourceid = 0) {
    let lines = string.split(/\r{0,1}\n/);
    // console.log(lines);
    let positions = [];
    for (let l = 0; l < lines.length; l++) {
        const elements = lines[l].split(/(,|;|\{|\[|\(|\}|\sas\s|->|=>)/);
        // console.log(elements);
        let newline = [];
        for (let c = 0, length = 0; c < elements.length; c++) {
            var element = elements[c];
            if (c === 0) {
                length = 0;
            }
            if (element === ',' || element === ';' || element === '{' || element === '[' || element === '(' || element === '}' || element === ' as ' || element === '->' || element === '=>') {
                newline.push(element);
            } else {
                newline.push('@' + sourceid + 'L' + l + 'P' + length + ':::' + element);
            }
            length += element.length;
        }
        positions.push(newline);
    }
    let newlines = positions.map((line) => {
        return line.join("");
    })
    // this.positions.push(positions);
    // console.log(newlines.join("\r\n"));
    lines = positions = undefined;
    return newlines.join("\r\n");
}