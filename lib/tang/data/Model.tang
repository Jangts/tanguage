@module;
/*!
 * tanguage framework source code
 *
 * class .data.Model
 *
 * Date 2017-04-06
 */


use $ util/;
use $ obj/;
use $ dom/;
use $ str/hash;

namespace data;

var
_ = pandora,
doc = root.document,
{console, location} = root;

var
alias = {},
models = {},
modeldata = {};

@include 'includes/ModelConst';
@include 'includes/Model';

class .Model {
    _init(props, name) {
        var props = modelsConstrutor(props);

        this.uid = uidMaker(props);

        if (name) {
            alias[this.uid] = name;
        } else {
            alias[this.uid] = this.uid;
        }
        models[this.uid] = props;
        modeldata[this.uid] = [];

        // console.log(this.uid, props, models);
    },
    check(prop, value) {
        if (property = models[this.uid][prop]) {
            return check(property, value);
        }
        return false;
    },
    create(data) {
        var newdata = {};
        each (models[this.uid] as prop, property) {
            // console.log(data, prop, _.obj.hasProp(data, prop));
            if (_.obj.hasProp(data, prop) && check(property, data[prop])) {
                newdata[prop] = data[prop];
            } else if (property.default !== undefined) {
                newdata[prop] = property.default;
            } else {
                _.error('Must input a correct [' + prop + '] for model [' + alias[this.uid] + ']');
            }
        }
        modeldata[this.uid].push(newdata);
        return modeldata[this.uid].length;
    },
    read($ID) {
        if ($ID) {
            return _.clone(modeldata[this.uid][$ID - 1]);
        }
        var list = {};
        each (modeldata[this.uid] as i, data) {
            if (data) {
                list[i + 1] = _.clone(data);
            }
        }
        return list;
    },
    update($ID, prop, value) {
        if (_.util.isObj(prop)) {
            var props = models[this.uid],
                data = modeldata[this.uid][$ID - 1];
            each (prop as p, v) {
                if (_.obj.hasProp(data, p) && check(props[p], v)) {
                    data[p] = v;
                }
            }
        } else if (_.util.isStr(prop)) {
            var obj = {};
            obj[prop] = value;
            this.update($ID, obj);
        }
        return this.read($ID);
    },
    delete($ID) {
        modeldata[this.uid][$ID - 1] = undefined;
        return true;
    },
    render(context) {
        var that = this;
        _.ab([
            '$_/see/see.css',
            '$_/dom/'
        ], function() {
            var list = that.read(),
                table = '<table class="table">';
            table += '<tr class="head-row"><th></th>';
            each (models[that.uid] as prop,) {
                table += '<th>' + prop.toUpperCase() + '</th>';
            }
            table += '</tr>';
            each (list as $ID, data) {
                table += '<tr><td>' + $ID + '</td>';
                each (data as value) {
                    if (_.util.isScala(value)) {
                        table += '<td>' + value + '</td>';
                    } else {
                        table += '<td>-</td>';
                    }
                }
                table += '</tr>';
            }
            table += '</table>';
            if (context) {
                _.dom.addClass(context, 'tang-see');
                _.dom.append(context, table);
            } else {
                _.dom.append(doc.body, table);
            }
        });
    }
}

this.module.exports = data.Model;