@module;
/*!
 * tanguage framework source code
 *
 * class .Component
 *
 * Date 2017-04-06
 */
;
use $ arr/;
use $ obj/;
use $ data/Storage;

namespace data.Storage;

var _ = pandora,
doc = root.document,
{console, location} = root,
{Storage, queryJSON} = _.data;

var infs = {},
tables = {},
metable = new Storage('pandora.data.Table'),
namingExpr = /^[A-Z_]\w*$/i,
partlen = 1000 * 1000 * 5;

@include '../includes/Sheet';

class .Sheet {
    _init(tablename, fields, primarykey, constraints) {
        if (namingExpr.test(tablename)) {
            this.tablename = tablename;
            if (!tables[tablename]) {
                var mateinfs = metable.get(tablename);
                if (!mateinfs) {
                    if (fields) {
                        mateinfs = create(tablename, fields, primarykey, constraints);
                        metable.set(tablename, mateinfs);
                    } else {
                        mateinfs = create(tablename, { 'id': 0 }, 'id', {});
                        metable.set(tablename, mateinfs);
                    }
                }
                var json = '';
                each (mateinfs.storages as i, storageName) {
                    json += new Storage(storageName).get('data');
                }
                // console.log(json);
                infs[tablename] = mateinfs;
                try {
                    tables[tablename] = root.JSON.parse(json);
                } catch (e) {
                    tables[tablename] = {};
                }
                console.log(mateinfs);
            }
        } else {
            _.error('Error Tablename');
        }
    }

    add(fieldname, value, constraint) {
        var tablename = this.tablename,
            mateinfs = infs[tablename];
        if (!mateinfs.fields.hasOwnProperty(fieldname)) {
            mateinfs.fields[fieldname] = value = value || '';
            if (constraint && constraint.type) {
                mateinfs.constraints[fieldname] = constraint;
            }
            each (tables[tablename] as id, row) {
                row[fieldname] = value;
            }
            update(tablename);
        }
        return this;
    }

    drop(fieldname) {
        var tablename = this.tablename,
            mateinfs = infs[tablename];
        if (fieldname) {
            if (mateinfs.fields.hasOwnProperty(fieldname)) {
                delete mateinfs.fields[fieldname];
                delete mateinfs.constraints[fieldname];
                each (tables[tablename] as id, row) {
                    delete row[fieldname];
                }
                update(this.tablename);
            }
            return this;
        }
        each (mateinfs.storages as i, storageName) {
            new Storage(storageName).clear(true);
        }
        metable.set(tablename);
        delete infs[tablename];
        delete tables[tablename];
        return null;
    }

    alter(fieldname, newname, value) {
        var tablename = this.tablename,
            mateinfs = infs[tablename];
        if (fieldname) {
            if (mateinfs.fields.hasOwnProperty(fieldname)) {
                mateinfs.fields[newname] = value === undefined ? mateinfs.fields[fieldname] : value;
                delete mateinfs.fields[fieldname];
                mateinfs.constraints[newname] = mateinfs.constraints[fieldname];
                delete mateinfs.constraints[fieldname];
                each (tables[tablename] as id, row) {
                    row[newname] = row[fieldname];
                    delete row[fieldname];
                }
                update(tablename);
            }
            return this;
        }
        return this;
    }

    insert(data) {
        var tablename = this.tablename,
            mateinfs = infs[tablename];
        each (arguments as i, data) {
            data = assign(mateinfs, data, {});
            data[mateinfs.pk] = ++mateinfs.ai;
            tables[tablename][mateinfs.ai] = data;
        }
        update(tablename);
        return mateinfs.ai;
    }

    update(id, data) {
        var tablename = this.tablename,
            mateinfs = infs[tablename];
        if (id && tables[tablename].hasOwnProperty(id) && data) {
            tables[tablename][id] = assign(mateinfs, data, tables[tablename][id]);
            update(tablename);
        }
        return this;
    }

    select(id) {
        var tablename = this.tablename;
        if (id) {
            rs = [];
            each (arguments as i, id) {
                if (tables[tablename][id]) {
                    rs.push(tables[tablename][id]);
                }
            }
            return rs;
        }
        return _.obj.toArray(tables[tablename]);
    }

    delete(id) {
        var tablename = this.tablename;
        if (id) {
            each (arguments as i, id) {
                delete tables[tablename][id]
            }
            update(tablename);
        }
        return this;
    }

    fields() {
        var fields = {},
            mateinfs = infs[this.tablename];
        if (mateinfs) {
            each (mateinfs.fields as fieldname, value) {
                fields[fieldname] = {
                    default: value,
                    constraint: mateinfs.constraints && mateinfs.constraints[fieldname],
                    isPKey: fieldname === mateinfs.pk
                };
            }
            return fields;
        }
        return false;
    }

    render(width, border, context) {
        var that = this;
        _.ab([
            '$_/see/see.css',
            '$_/dom/'
        ], function() {
            var mateinfs = infs[that.tablename];
            if (mateinfs) {
                if (width) {
                    _width = ' width="' + width + '"';
                } else {
                    _width = '';
                }
                if (border) {
                    _border = ' border="' + border + '"';
                } else {
                    _border = '';
                }
                var rows = tables[that.tablename],
                    html = '<table class="table" ' + _width + _border + '><tbody><tr class="head-row"><th>' + mateinfs.pk + '</th>';
                each (mateinfs.fields as fieldname, ) {
                    if (fieldname != mateinfs.pk) {
                        html += '<th>' + fieldname + '</th>';
                    }
                }
                each (rows as id, row) {
                    html += '</tr><tr><td>' + id + '</td>';
                    each (row as fieldname, value) {
                        if (fieldname != mateinfs.pk) {
                            html += '<td>' + value + '</td>';
                        }
                    }
                }
                html += '</tr></tbody></table>';
                if (context) {
                    _.dom.addClass(context, 'tang-see');
                    _.dom.append(context, html);
                } else {
                    _.dom.append(doc.body, html);
                }
            }
            return false;
        });
    }

    @include '../includes/exec';
}

this.module.exports = Storage.Sheet;