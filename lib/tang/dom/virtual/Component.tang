@module;

use $ dom/virtual/Element;

namespace dom.virtual;

const
REPLACE = 0,
REORDER = 1,
PROPS = 2,
TEXT = 3;

let doc = root.document;
let {is, isFn, isStr} = ..util.bool;

@include 'patch';
@include 'diff';

createVDom (vNode){
    switch (typeof vNode) {
        case 'string':
            return new virtual.Element(vNode);

        case 'object':
            return new virtual.Element(vNode.tagName, vNode.props || {}, vNode.childs);
        
        default:
            return new virtual.Element('div');
    }
}

class .Component {
    static REPLACE = REPLACE;
    static REORDER = REORDER;
    static PROPS = PROPS;
    static TEXT = TEXT;

    Element;
    vNode;
    _init(options={}){
        if(options.vNode){
            // 检查vNode是否dom.virtual.Element实例
            // log virtual.Element;
            if(is(options.vNode, virtual.Element)){
                this.vNode = options.vNode;
            }else{
                this.vNode = createVDom (options.vNode);
            }
        }else{
            this.vNode = new virtual.Element('div');
        }
        this.Element = this.vNode.render();
        if(options.context){
            if(isFn(options.context.appendChild)){
                this.appendTo(options.context);
            }else{
                doc.body.appendChild(this.Element);
            }
        }
    }
    appendTo(context){
        context.appendChild(this.Element);
        return this;
    }
    diff(vNode){
        let _vNode = createVDom (vNode);
        return diff(this.vNode, _vNode);
    }
    patch(vNode, walker = { index: 0 }){
        let _vNode = createVDom (vNode);
        let patches = diff(this.vNode, _vNode);
        patch(this.Element, patches, walker);
        this.vNode = _vNode;
        return patches;
    }
}