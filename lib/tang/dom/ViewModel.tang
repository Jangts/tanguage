@module;
/*!
 * tanguage framework source code
 *
 * class dom.Events
 *
 * Date 2017-04-06
 */
use $ util/bool;
use $ obj/Observer/;
use $ obj/Observer/Listener;

namespace dom;

let _ = pandora,
doc = root.document;

let vdoms = {},
isFn = _.util.bool.isFn,
diff, patch,
observe = _.obj.observe,
updateByCustomRenderer = () {
    isFn(this.options.beforeRender) && this.options.beforeRender.call(this.options);
    this.options.render.call(this.options);
    isFn(this.options.afterRender) && this.options.afterRender.call(this.options);
},
updateByVElement = () {
    var tree = this.options.render.call(this);
    if (vdoms[this.id]) {
        patches = diff(vdoms[this.id].tree, tree);
        patch(vdoms[this.id].dom, patches);
        vdoms[this.id].tree = tree;
    } else {
        var dom = tree.render();
        vdoms[this.id] = {
            tree: tree,
            dom: dom
        };
        _.dom.events.add(dom, 'change', 'input, select, textarea', this, (e) {
            //e.data.observer.silently = true;
            e.data.input = this.value;
            //e.data.observer.silently = false;
        });
        doc.body.appendChild(dom);
    }
},
proxy = (key) {
    var that = this;
    Object.defineProperty(this, key, {
        configurable: true,
        enumerable: true,
        get proxyGetter() {
            return that.data[key];
        },
        set proxySetter(val) {
            that.data[key] = val;
        }
    })
};

class .ViewModel {
    _init(options, useVElement) {
        options = options || {};
        var that = this;
        this.id = new _.Identifier().toString();
        this.options = options;
        this.data = options.data;
        if (useVElement || (useVElement !== false && options.useVElement)) {
            diff = _.dom.VElement.diff;
            patch = _.dom.VElement.patch;
            var update = updateByVElement;
        } else {
            var update = updateByCustomRenderer;
        }
        this.observer = observe(options.data).listen((key) {
            console.log(key);
            update.call(that);
        });
        each(options.data as key,) {
            proxy.call(this, key);
        }
        update.call(this);
    }
}

module.exports = $..ViewModel;
