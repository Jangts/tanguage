@module;

/*!
 * tanguage framework source code
 *
 * class dom.Animation
 *
 * Date 2017-04-06
 */

use $ util/bool;
use $ util/Color;
use $ dom/;

namespace dom;

let _ = pandora,
doc = root.document;

let rgba = (() {
    var div = doc.createElement('div');
    div.style.backgroundColor = "rgb(0,0,0)";
    div.style.backgroundColor = "rgba(0,0,0,0)";
    var backgroundColor = div.style.backgroundColor;
    return (/^rgba\([0-9,\.\s]+\)$/.test(backgroundColor));
})();

class .Animation extends ..Iterator {
    fps = 36
    loop = 1
    timer = undefined
    data = undefined
    static tweens = {}

    _init(elem, options) {
        this.Element = elem;
        this.curScene = 0;
        this.curFrame = 0;
        this.playback = true;
        this.running = false;
        this.looped = 0;
        options && this.push(options);
    }
    

    tween(t, b, c, d) {
        return c * t / d + b;
    }

    cut(options) {
        this.duration = options.duration || 1000;
        this.tween = typeof(options.tween) == 'function' ? options.tween : this.tween;
        this.mc = {};
        for (var i in options.to) {
            this.mc[i] = {
                from: options.from && typeof(options.from[i]) != 'undefined' ? this.rgbFormat(options.from[i]) : this.rgbFormat($..getStyle(this.Element, i)),
                to: this.rgbFormat(options.to[i]),
                over: options.over && options.over[i] ? this.rgbFormat(options.over[i]) : this.rgbFormat(options.to[i]),
                tween: options.tween && options.tween[i] ? options.tween[i] : this.tween
            };
        };
        this.frames = Math.ceil(this.duration * this.fps / 1000);
        return this;
    }

    rgbFormat(value) {
        var arr = _.util.Color.toArray(value);
        if (arr) {
            return arr;
        }
        // log value;
        if (/^(\+|-)?\d+%$/.test(value)) {
            return value;
        }
        return parseFloat(value);
    }

    play(loop, callback) {
        if (this.playback && this.length > 0) {
            this.playback = false;
            this.running = true;
            loop = loop || this.loop || 1;
            this.curScene = 0;
            if (this.looped < loop || loop == -1) {
                this.transfer(this);
            } else {
                this.looped = 0;
                callback = callback || this.callback || null;
                callback && callback.call(this.Element, this.data);
                this.length = 0;
                this.curScene = 0;
                this.playback = true;
            }
        }
    }

    transfer(that) {
        if (this.curScene < this.length) {
            this.gotoAndPlay(this.curScene, 0);
            this.curScene++;
        } else {
            this.looped++;
            this.playback = true;
            this.play();
        }
    }

    //开始播放
    enterClip(callback) {
        var that = this;
        callback = callback || this[this.curScene] && this[this.curScene].callback || null;
        this.timer && this.stop();
        this.timer = setInterval(() {
            if (that.curFrame >= that.frames) {
                that.stop();
                callback && callback.call(that.Element, that.looped);
                that.running && that.transfer();
                return;
            }
            that.curFrame++;
            that.enterFrame.call(that);
        }, 1000 / this.fps);
        return this;
    }

    // 停止动画
    stop() {
        //console.log('结束动画！');
        if (this.timer) {
            clearInterval(this.timer);
            // 清除掉timer id
            this.timer = undefined;
        }
        return this;
    }
    //向后一帧
    next() {
        this.stop();
        this.curFrame++;
        this.curFrame = this.curFrame > this.frames ? this.frames : this.curFrame;
        this.enterFrame.call(this);
        return this;
    }
    //向前一帧
    prev() {
        this.stop();
        this.curFrame--;
        this.curFrame = this.curFrame < 0 ? 0 : this.curFrame;
        this.enterFrame.call(this);
        return this;
    }
    //跳跃到指定帧并播放
    gotoAndPlay(sc, frame) {
        this.stop();
        if (typeof frame != 'undefined') {
            this[sc] && this.cut(this[sc]);
            this.curFrame = frame;
        } else {
            this.curFrame = sc;
        }
        this.enterClip.call(this);
        return this;
    }
    //跳到指定帧停止播放
    gotoAndStop(sc, frame) {
        this.stop();
        if (typeof frame != 'undefined') {
            this[sc] && this.cut(this[sc]);
            this.curFrame = frame;
        } else {
            this.curFrame = sc;
        }
        this.enterFrame.call(this);
        return this;
    }
    //进入帧动作
    enterFrame() {
        //console.log('进入帧：' + this.curFrame)
        var ds, from, to;
        for (var prop in this.mc) {
            from = this.mc[prop]['from'],
                to = this.curFrame == this.frames ? this.mc[prop]['over'] : this.mc[prop]['to'],
                tween = this.mc[prop].tween;
            // log 'from:', from;
            // log 'to:', to;
            if (typeof(from) == 'number' && typeof(to) == 'number') {
                ds = tween(this.curFrame, from, to - from, this.frames).toFixed(5);
            }
            else if (typeof(from) == 'object' && to instanceof Array) {
                var red = tween(this.curFrame, from[0], to[0] - from[0], this.frames).toFixed(0),
                    green = tween(this.curFrame, from[1], to[1] - from[1], this.frames).toFixed(0),
                    blue = tween(this.curFrame, from[2], to[2] - from[2], this.frames).toFixed(0);
                alpha = tween(this.curFrame, from[3], to[3] - from[3], this.frames).toFixed(0);
                if (rgba) {
                    ds = 'rgba(' + red + ', ' + green + ', ' + blue + ', ' + alpha + ')';
                } else {
                    ds = 'rgb(' + red + ', ' + green + ', ' + blue + ')';
                }
            }
            else if (typeof(to) === 'string' && /^(\+|-)?\d+%$/.test(to)) {
                var to = parseFloat(to);
                if (/^(\+|-)?\d+%$/.test(from)) {
                    var from = parseFloat(from);
                } else {
                    var parent = /(width|left|right)/i.test(prop) ? parseFloat($..getStyle(this.Element.parentNode, 'width')) : parseFloat($..getStyle(this.Element.parentNode, 'height')),
                        from = from / parent * 100;
                }
                ds = tween(this.curFrame, from, to - from, this.frames) + '%';
            } else if (typeof(from) === 'string' && /^(\+|-)?\d+%$/.test(from)) {
                var parent = /(width|left|right)/i.test(prop) ? parseFloat($..getStyle(this.Element.parentNode, 'width')) : parseFloat($..getStyle(this.Element.parentNode, 'height')),
                    from = parseFloat(from) * parent / 100,
                    to = to;
                ds = tween(this.curFrame, from, to - from, this.frames);
            }
            //console.log(prop + ':' + ds);
            $..setStyle(this.Element, prop, ds);
        }
        return this;
    }

    complete() {}

    hasNext() {}

    static setTweens(tweens) {
        _.each(tweens, (type, tween) {
            if (typeof tween === 'function') {
                $..Animation.tweens[type] = tween;
            } else if ((typeof tween === 'string') && $..Animation.tweens[tween]) {
                $..Animation.tweens[type] = $..Animation.tweens[tween];
            }
        });
    }

    static getTween(tweenName) {
        if (tweenName && $..Animation.tweens[tweenName]) {
            return $..Animation.tweens[tweenName];
        }
        return (t, b, c, d) {
            return c * t / d + b;
        }
    }
}

@include 'animation';

module.exports = {
    Animation : $..Animation,
    animation : $..animation
};
