@module;
/*!
 * tanguage framework source code
 *
 * class dom.Events
 *
 * Date 2017-04-06
 */
use $ dom/;

namespace dom;

var _ = pandora,
query = $..sizzle || $..selector;

var doc = root.document,
removeByIndex = function(array, index) {
    var result = [];
    for (var i = 0; i < array.length; i++) {
        i == index || result.push(array[i]);
    }
    return result;
};

class .Events {
    HTMLElement
    
    _protected =  {
        types: {},
        keys: []
    }

    _init(elem) {
        this.HTMLElement = elem;
        this.eventTypes = {};
    }
    
    listen(eventType) {
        if (!this.eventTypes[eventType]) {
            var that = this;
            var originType = this.originEventType(eventType, this.HTMLElement);
            if (originType) {
                this.eventTypes[eventType] = {
                    Listener(event) {
                        that.fire(event, eventType);
                    },
                    Selectors: {},
                    Elements: []
                };
                doc.addEventListener ? this.HTMLElement.addEventListener(originType, this.eventTypes[eventType].Listener, false) : this.HTMLElement.attachEvent("on" + originType, this.eventTypes[eventType].Listener);
            }
        }
        return this;
    }

    push(eventType, selector, data, handler) {
        if (typeof handler == 'function') {
            this.listen(eventType);
            if (this.eventTypes[eventType]) {
                switch (typeof selector) {
                    case 'string':
                        this.eventTypes[eventType]['Selectors'][selector] = this.eventTypes[eventType]['Selectors'][selector] || [];
                        this.eventTypes[eventType]['Selectors'][selector].push({
                            data: data,
                            handler: handler
                        });
                        break;
                    case 'object':
                        selector = selector || this.HTMLElement;
                        this.eventTypes[eventType]['Elements'].push({
                            elem: selector,
                            data: data,
                            handler: handler
                        });
                        break;
                }
            }
        }
        return this;
    }

    originEventType(eventType, elem) {
        if (typeof eventType == 'string' && typeof elem == 'object' && (elem.nodeType == 1 || elem.nodeType == 9 || elem === root)) {
            if (typeof elem['on' + eventType] != 'undefined') {
                return eventType;
            }
            if (this._protected.types[eventType]) {
                return this._protected.types[eventType].type;
            }
            return eventType;
        }
        return null;
    }

    checkEventType(event, eventType) {
        if (eventType === event.type) {
            return true;
        } else if (this._protected.types[eventType]) {
            for (var i in this._protected.types[eventType]) {
                if (this._protected.types[eventType][i] != event[i]) {
                    return false;
                }
            }
            return true;
        }
    }

    fire(event, eventType) {
        var callback = function(elem, sele) {
            event.data = sele.data;
            // clog elem, event;
            sele.handler.call(elem, event);
        };
        event.currentTarget = event.currentTarget || event.target || event.relatedTarget || event.srcElement;
        event.target = event.target || event.currentTarget;
        event.delegateTarget = this.HTMLElement;
        event.path = event.path || $..getParentNodes(event.target, true);
        event.isCurrent = (event.delegateTarget === event.target);
        // if (event.delegateTarget === event.target) {
        //     // event.path = event.path || [event.target];
        //     event.isCurrent = true;
        // } else {
        //     // event.path = event.path || [event.target, event.delegateTarget];
        //     event.isCurrent = false;
        // }
        event.wheelDelta = event.wheelDelta || event.detail * -40;
        event.timeStamp = Date.parse(new Date()) / 1000;
        event.eventType = eventType;
        if (_.arr.has(['keypress', 'keyup', 'keydown'], event.type) !== false) {
            event.keyName = _.str.charCode(event.which);
        }

        if (this.checkEventType(event, eventType)) {
            var EventType = this.eventTypes[eventType];
            // if (eventType==='click'){
            //     console.log(event, EventType);
            // }

            for (var s in EventType['Selectors']) {
                var selector = EventType['Selectors'][s];
                var elements = query(s, this.HTMLElement);
                // if (eventType === 'click') {
                //     console.log(elements);
                // }
                for (var i = 0; i < elements.length; i++) {
                    if (_.arr.has(event.path, elements[i]) !== false) {
                        for (var n in selector) {
                            callback(elements[i], selector[n]);
                        }
                    }
                }
            };
            for (var e in EventType['Elements']) {
                var selector = EventType['Elements'][e];
                if (_.arr.has(event.path, selector.elem) !== false) {
                    callback(selector.elem, selector);
                }
            }
        }
        return this;
    }

    trigger(eventType, target, data) {
        if (this.eventTypes[eventType]) {
            var originEventType = this.originEventType(eventType);
            var event = {
                path: [this.HTMLElement],
                currentTarget: target,
                data: data,
                delegateTarget: this.HTMLElement,
                isCurrent: false,
                isTrigger: true,
                target: target,
                timeStamp: Date.parse(new Date()) / 1000,
                type: originEventType,
                eventType: eventType
            };
            var fire = function(callback) {
                callback._handler = callback.handler;
                callback.handler = function() {
                    callback.handler = callback._handler;
                    callback._handler = null;
                    delete callback._handler;
                }
                callback._handler.call(event.target, event);
                //typeof event.target[originEventType] == 'function' && event.target[originEventType]();
            };
            for (var s in this.eventTypes[eventType]['Selectors']) {
                var selector = this.eventTypes[eventType]['Selectors'][s];
                var elements = query(s, this.HTMLElement);
                for (var i = 0; i < elements.length; i++) {
                    if (elements[i] == target) {
                        for (var n in selector) {
                            fire(selector[n]);
                        }
                    }
                }
            };
            for (var e in this.eventTypes[eventType]['Elements']) {
                var selector = this.eventTypes[eventType]['Elements'][e];
                if (selector.elem == target) {
                    fire(selector);
                }
            };
        }
        return this;
    }

    removeHandler(eventType, selector, handler) {
        if (this.eventTypes[eventType]) {
            selector = selector || this.HTMLElement;
            switch (typeof selector) {
                case 'string':
                    for (var h in this.eventTypes[eventType]['Selectors'][selector]) {
                        if (this.eventTypes[eventType]['Selectors'][selector][h].handler == handler) {
                            delete this.eventTypes[eventType]['Selectors'][selector][h];
                        }
                    }
                    break;
                case 'object':
                    for (var e = 0; e < this.eventTypes[eventType]['Elements'].length; e++) {
                        if (this.eventTypes[eventType]['Elements'][e] && this.eventTypes[eventType]['Elements'][e].elem == selector && (this.eventTypes[eventType]['Elements'][e].handler == handler || this.eventTypes[eventType]['Elements'][e]._handler == handler)) {
                            this.eventTypes[eventType]['Elements'] = removeByIndex(this.eventTypes[eventType]['Elements'], e);
                            e--;
                        }
                    }
                    break;
            }
        }
        return this;
    }

    removeSelector(eventType, selector) {
        if (this.eventTypes[eventType]) {
            selector = selector || this.HTMLElement;
            switch (typeof selector) {
                case 'string':
                    delete this.eventTypes[eventType]['Selectors'][selector];
                    break;
                case 'object':
                    for (var e = 0; e < this.eventTypes[eventType]['Elements'].length; e++) {
                        if (this.eventTypes[eventType]['Elements'][e].elem == selector) {
                            this.eventTypes[eventType]['Elements'] = removeByIndex(this.eventTypes[eventType]['Elements'], e);
                            e--;
                        }
                    }
                    break;
            }
        }
        return this;
    }

    removeType(eventType) {
        if (this.eventTypes[eventType]) {
            var originType = this.originEventType(eventType);
            doc.addEventListener ? this.HTMLElement.removeEventListener(originType, this.eventTypes[eventType].Listener, false) : this.HTMLElement.detachEvent("on" + originType, this.eventTypes[eventType].Listener);
            delete this.eventTypes[eventType];
        }
        return this;
    }

    remove() {
        for (var eventType in this.eventTypes) {
            var originType = this.originEventType(eventType);
            doc.addEventListener ? this.HTMLElement.removeEventListener(originType, this.eventTypes[eventType].Listener, false) : this.HTMLElement.detachEvent("on" + originType, this.eventTypes[eventType].Listener);
            delete this.eventTypes[eventType];
        }
        delete this.eventTypes;
        delete this.HTMLElement;
        return this;
    }

    static setType(types) {
        var domEvents = new $..Events();
        for (var i in types) {
            domEvents._protected.types[i] = types[i];
        }
    }
}

@include 'EventTypes';

this.module.exports = $..Events;