/*!
 * tanguage framework source code
 *
 * package dom.selector
 *
 * Date 2017-04-06
 */
;
use $ str/;
use $ arr/;
use $ obj/;

let doc = root.document;

let
//选择器正则表达式
idExpr = /^([\w-]+)?#([\w-]+)/,
classExpr = /^([\w-]+)?\.([\w-]+)/,
attrExpr = /^([\w-]+)?\[([\w-]+)([|*~\$!]*)(?:=(?:['"]?)(\w+)(?:['"]?))?\]/,
gtExpr = /^([\w-#.]+)(?:\s*)(\>)(?:\s*)([\w#.-]+)/,
onlyIdExpr = /^#[\w-_]*$/i, 
onlyNameExpr = /^@[\w-_]+$/i;

//选择器入口
selector(selector, context) {
    context = context || document;
    var result = [];
    if (onlyIdExpr.test(selector)) {
        selector = selector.replace(/#/, "");
        var elem = doc.getElementById(selector);
        if (elem) {
            if (context == document || hasChildNode(context, elem)) {
                return [elem];
            }
        }
        return [];
    }
    if (onlyNameExpr.test(selector)) {
        selector = selector.replace(/@/, "");
        return context.getElementsByName(selector);
    }
    if (doc.querySelectorAll) {
        context = context.querySelectorAll ? context : document;
        if (selector.match(/\[[\w-]+=("|')[^\1]*\1[^\]]*\1\]/g)) {
            return [];
        }
        selector = selector.replace(/\[[\w-]+=[^'"=\]]+\]/g, (attr) {
                return attr.replace("=", '="').replace("]", '"]');
            }).replace(/\[+/, '[').replace(/\]+/, ']');
        result = context.querySelectorAll(selector);
    } else {
        each(selector.split(',') as s) {
            result = result.concat(filters(s, context));
        }
        result = ..arr.unique(result);
    };
    return result;
}

//选择器匹配管理
filters (selector, context) {
    var result = [];
    var splits = selector.match(gtExpr);
    if (splits) {
        return childFilters(splits, context);
    };
    splits = selector.split(/\s+/);
    var ps = find(splits[0], context);
    if (!splits[1]) {
        return ps;
    }
    each(ps as elem) {
        result = result.concat(find(splits[1], elem));
    }
    return result;
}

childFilters (splits, context) {
    var result = [];
    each(find(splits[1]) as context) {
        each(context.childNodes as child) {
            (child.nodeType == 1 && (child.tagName == splits[3].toUpperCase() || "#" + child.id == splits[3] || ..str.has(child.className, splits[3].replace('.', '')))) && result.push(child);
        }
    }
    return result;
}

//选择器简单匹配
find (selector, context) {
    var result = [];
    var className = selector.match(classExpr);
    var id = !className && selector.match(idExpr);
    var attr = !id && selector.match(attrExpr);
    if (id) {
        var elem = byId(id[2], context, id[1]);
        if (elem) {
            result.push(elem);
        }
    } else if (className) {
        result = byClass(className[2], context, className[1]);
    } else if (attr) {
        result = byAttr(attr[2], attr[4], context, attr[1], attr[3]);
    } else {
        result = byTagName(selector, context);
    }
    return ..uitl.obj.toArray(result);
}

/**
 * Sub Selectors And Other Auxiliary Methods Of tanguage Selector
 * ------------------------------------------------------------------
 */

/**
 * ID Selector
 *
 * Select HTMLElement By 'id' (and tagName)
 *
 * @param {String} id, id attribute of Selected HTMLElement must be this string
 * @param {Object<HTMLElement>} context, Selected HTMLElement must be childNode of this object
 * @param {String} tagName, tagName of Selected HTMLElement must be this string
 * @returns void
 *
 * @date 2015-09-12
 * @author QETHAN<qinbinyang@zuijiao.net>
 */
byId (id, context, tagName) {
    context = context || document;
    var elem = doc.getElementById(id);
    if (tagName && elem && elem.tagName != tagName.toUpperCase()) {
        return undefined;
    };
    if (!hasChildNode(context, elem)) {
        return undefined;
    }
    return elem;
}

hasChildNode (elem, node) {
    if (node && elem) {
        node = node.parentNode;
        while (node != undefined && node != null) {
            if (node === elem) {
                return true;
            }
            node = node.parentNode;
        }
    }
    return false;
}

byClass (className, context, tagName) {
    context = context || document;
    if (doc.getElementsByClassName && !tagName) {
        return context.getElementsByClassName(className);
    };
    if (doc.querySelectorAll) {
        return context.querySelectorAll((tagName || "") + "." + className);
    };
    return byAttr("class", className, context, tagName, '~');
}

byAttr (name, val, context, tagName, sign) {
    name = name == 'class' && 'className';
    var result = [];
    var vl = val ? val.length : 0;
    var vi = !val ? -1 : (!sign ? 0 : ' |*~$!'.indexOf(sign));
    each(byTagName(tagName, context) as elem) {
        var v = elem[name] || elem.getAttribute(name);
        if (elem.nodeType == 1 && v) {
            var exprs = [true, v == val, v.substr(0, vl) == val, v.indexOf(val) > -1, ..str.has(v, val), v.substr(v.length - vl) == val, v != val];
            if (exprs[vi + 1])
                result.push(elem);
        };
    }
    return result;
}

byTagName (tagName, context) {
    tagName = tagName || "*";
    context = context || document;
    return context.getElementsByTagName(tagName);
}

byAttrsObject (Attrs, context) {
    var str = '';
    if (Attrs.tagName)
        str = Attrs.tagName;
    if (Attrs.id)
        str += '#' + Attrs.id;
    if (Attrs.className) {
        if (typeof(Attrs.className) == 'string') {
            str += '.' + Attrs.className;
        } else if (..util.type(Attrs.className) == 'Array') {
            for (var i in Attrs.className) {
                str += '.' + Attrs.className[i];
            }
        }
    }
    if (Attrs.name)
        str += '[name=' + Attrs.name + ']';
    for (var i in Attrs) {
        if (i != 'tagName' && i != 'id' && i != 'className' && i != 'name') {
            str += '[' + i + '=' + Attrs[i] + ']';
        }
    }
    return selector(str, context);
}

extends ..dom {
    selector: selector,
    hasChildNode: hasChildNode,
    hasParentNode: (elem, node) {
        return hasChildNode(node, elem);
    }
}

extends ..dom.selector {
    byId: byId,
    byAttr: byAttrsObject,
    byTag: byTagName,
    byClass: byClass,
}

extends pandora {
    byId: byId,
    byCn: byClass,
    selector: ..dom.sizzle || query
}