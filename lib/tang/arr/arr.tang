@module;
/*!
 * tanguage framework source code
 *
 * static arr
 *
 * Date 2017-04-06
 */

use $ util/;

var _ = pandora;

// if(Array.prototype.includes==undefined){
//     Array.prototype.includes = function (searchElement, fromIndex){
//         fromIndex = parseInt(fromIndex) || 0;
//         for (fromIndex; fromIndex < this.length; fromIndex++) {
//             if (this[fromIndex] === elem) {
//                 return true;
//             };
//         };
//         return false;
//     }
// }

ns arr with {
    merge() {
        if (arguments.length > 0) {
            var array = [];
            for (var a = 0; a < arguments.length; a++) {
                if (typeof arguments[a] == 'object' && arguments[a] instanceof Array) {
                    each(arguments[a] as index, elememt) {
                        if (array.indexOf(elememt) < 0) {
                            array.push(elememt);
                        }
                    };
                }
            }
        } else {
            var array = [];
        }
        return array;
    },
    beObject(array1, array2) {
        var object = {};
        if (array2) {
            for (var i = 0; i < array1.length; i++) {
                object[array1[i]] = array2[i] || null;
            }
        } else {
            for (var i = 0; i < array1.length; i++) {
                object[i] = array1[i];
            }
        }
        return object;
    },
    each(array, handler) {
        if (_.util.isArray(array)) {
            for (var i = 0; i < array.length; i++) {
                handler.call(array[i], i, array[i]);
            }
        }
    },
    eachReverse(array, handler) {
        if (_.util.isArray(array)) {
            for (var i = array.length - 1; i > -1; i--) {
                handler.call(array[i], i, array[i]);
            }
        }
    },
    has(array, elem) {
        for (var i = 0; i < array.length; i++) {
            if (array[i] === elem) {
                return i;
            };
        };
        return false;
    },
    push(elem, array, index) {
        index = parseInt(index);
        if (index >= 0 && index < array.length) {
            var _array = array;
            array.length = index;

        } else {
            var _array = [];

        }
        array.push(elem);
        for (var i = index + 1; i < _array.length; i++) {
            array.push(_array[i]);
        }
        return array;
    },
    remove(array, elem) {
        var result = [];
        for (var i = 0; i < array.length; i++) {
            array[i] == elem || result.push(array[i]);
        }
        return result;
    },
    removeByIndex(array, index) {
        var result = [];
        for (var i = 0; i < array.length; i++) {
            i == index || result.push(array[i]);
        }
        return result;
    },
    index(array, elem) {
        if (Array.prototype.indexOf) {
            return array.indexOf(elem);
        } else {
            for (var i = 0; i < array.length; i++) {
                if (array[i] === elem) return i;
            }
            return -1;
        }
    },
    search(elem, array) {
        return _.arr.index(array, elem);
    },
    where(array, filter) {
        var filtered = [];
        each(array as index, elem) {
            if (filter(elem)) {
                filtered.push(elem);
            }
        }
        return filtered;
    },
    unique(array) {
        var result = [];
        each(array as i, elem) {
            if (_.arr.has(result, elem) === false) {
                result.push(elem);
            };
        }
        return result;
    },
    sum(array) {
        return eval(array.join('+'));
    },
    max(array) {
        return Math.max.apply(Math, array);
    },
    min(array) {
        return Math.min.apply(Math, array);
    },
    indexOfMax(array) {
        return _.arr.index(array, Math.max.apply(Math, array));
    },
    indexOfMin(array) {
        return _.arr.index(array, Math.min.apply(Math, array));
    },
    slice: _.slice
};

@include 'diff';


this.module.exports = ..arr;