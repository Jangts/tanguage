@module;
/*!
 * tanguage framework source code
 *
 * class .async.Promise
 *
 * Date 2017-04-06
 */

var _ = pandora,
doc = root.document,
console = root.console;

namespace async;

class .Promise {
    _init(resolver) {
        var Promise = this;

        function resolve(value) {
            Promise.PromiseStatus = 'resolved';
            Promise.PromiseValue = value;
            Promise.listener();
        }

        function reject(value) {
            Promise.PromiseStatus = 'rejected';
            Promise.PromiseValue = value;
            Promise.listener();
        }
        this.PromiseStatus = 'pending';
        this.PromiseValue = undefined;
        this.handlers = {
            always: [],
            done: [],
            fail: [],
            progress: []
        };
        resolver && resolver(resolve, reject);
    }

    listener() {
        switch (this.PromiseStatus) {
            case 'resolved':
                this.callback('always', this.PromiseValue);
                this.callback('done', this.PromiseValue);
                break;
            case 'rejected':
                this.callback('always', this.PromiseValue);
                this.callback('fail', this.PromiseValue);
                break;
            case 'pending':
                this.callback('progress', this.PromiseValue);
                break;
        }
    }
    
    callback(status, data) {
        for (var i in this.handlers[status]) {
            this.handlers[status][i].call(this, data);
        }
        this.handlers[status] = [];
        if (status === 'done' || status == 'fail') {
            this.handlers = {
                always: [],
                done: [],
                fail: [],
                progress: []
            };
        };
    }
    
    then(doneCallbacks, failCallbacks) {
        var Promise = this;
        return new $..Promise(function(resolve, reject) {
            try {
                typeof doneCallbacks === 'function' && Promise.handlers.done.push(doneCallbacks);
                typeof failCallbacks === 'function' && Promise.handlers.fail.push(failCallbacks);
                Promise.handlers.always.push(resolve);
                Promise.listener();
            } catch (err) {
                reject(err);
                //console.log(err);
            }
        });
    }
    
    done(doneCallbacks) {
        typeof doneCallbacks == 'function' && this.handlers.done.push(doneCallbacks);
    }
    
    'catch'(failCallbacks) {
        return this.then(null, failCallbacks);
    }

    static all(array) {
        var Callback;
        var Result = [];
        var Promises = {
            then(doneCallback) {
                Callback = (typeof doneCallback === 'function') ? doneCallback : undefined;
            }
        };
        var Done = 0;
        var Check = function() {
            Done++;
            if (Done == array.length) {
                Callback && Callback(Result);
            }
        };
        each (array as i, item) {
            item.then(function(data) {
                Result[i] = data;
                Check();
            });
        }
        return Promises;
    }

    static race(array) {
        var Done;
        var Fail;
        var Promises = {
            then(doneCallback, failCallback) {
                Done = (typeof doneCallback === 'function') ? doneCallback : undefined;
                Fail = (typeof failCallback === 'function') ? failCallback : undefined;
            }

        };
        var Checked = false;
        var Check = function(Promise) {
            if (Checked === false) {
                Checked = true;
                if (Promise.PromiseStatus === "resolved") {
                    Done && Done(Promise.PromiseValue);
                }
                if (Promise.PromiseStatus === "rejected") {
                    Fail && Fail(Promise.PromiseValue);
                }
            }
        };
        each (array as i, item) {
            item.then(function() {
                Check(item);
            }, function() {
                Check(item);
            });
        }
        return Promises;
    }
    
    static oneByOne(array) {
        var Done,
            Fail,
            Value = [],
            Promises = {
                then(doneCallback, failCallback) {
                    Done = (typeof doneCallback === 'function') ? doneCallback : undefined;
                    Fail = (typeof failCallback === 'function') ? failCallback : undefined;
                }
            },
            iterator = new _.Iterator(array);
        var Resolver = function(callback) {
                new $..Promise(callback).done(function(data) {
                    Value.push(data);
                    Check();
                });
            },
            Check = function() {
                var elememt = iterator.next();
                if (elememt && typeof elememt == 'function') {
                    Resolver(elememt);
                } else if (iterator.__ == array.length - 1) {
                    Done && Done.call({ PromiseStatus: 'resolved', PromiseValue: Value }, Value);
                } else {
                    Fail && Fail.call({ PromiseStatus: 'resolved', PromiseValue: Value }, Value);
                }
            };
        Check();
        return Promises;
    }
}

this.module.exports = $..Promise;