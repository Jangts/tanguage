@module;
/*!
 * tanguage framework source code
 *
 * class .media.Player
 *
 * Date 2017-04-06
 */

use $ dom/Events;

var _ = pandora,
doc = root.document,
console = root.console;

class .media.Player {
    type = 'AUDIO'
    protectTime = 100
    lastActionTime = Date.now()
    _init(elem, sheet) {
        if (_.util.bool.isEl(elem) && _.uitl.bool.inArr(elem.tagName, ['AUDIO', 'VIDEO'])) {
            this.Element = elem;
            this.type = this.Element.tagName;
        } else {
            this.Element = new Audio;
            this.type = 'AUDIO';
            sheet = elem;
        }
        this.sheet = {};
        this.register(sheet);
    }
    setSource(sources) {
        if (sources && (typeof sources === 'object')) {
            var that = this;
            for (var i in sources) {
                if (this.canPlay(i) == 'maybe') {
                    try {
                        that.Element.src = sources[i];
                    } catch (e) {
                        this.stop(function() {
                            that.Element.src = sources[i];
                        });
                    }
                    break;
                }
            }
        }
        return this;
    }
    register(sheet, sources) {
        if (sheet && (typeof sheet === 'object')) {
            for (var code in sheet) {
                if (sheet[code] && (typeof sheet[code] === 'object')) {
                    this.sheet[code] = sheet[code];
                }
            }
        } else if (sheet && sources && (typeof sheet === 'string') && (typeof sources === 'object')) {
            this.sheet[code] = sheet[code];
        }
        return this;
    }
    clear(sheet, sources) {
        this.sheet = [];
    }
    play(code) {
        if (code && this.sheet[code]) {
            this.setSource(this.sheet[code]);
        }
        var that = this,
            duration = Date.now() - this.lastActionTime;
        if (duration > this.protectTime) {
            this.Element.play();
            this.lastActionTime = Date.now();
        } else {
            this.timer && clearTimeout(this.timer);
            this.timer = setTimeout(function() {
                that.Element.play();
                that.lastActionTime = Date.now();
            }, this.protectTime - duration);
        }
        return this;
    }
    canPlay(mime) {
        return this.Element.canPlayType(mime);
    }
    pause(onpause) {
        var that = this,
            duration = Date.now() - this.lastActionTime;
        if (duration > this.protectTime) {
            this.Element.pause();
            this.lastActionTime = Date.now();
            _.util.bool.isFn(onpause) && onpause.call(this);
        } else {
            this.timer && clearTimeout(this.timer);
            this.timer = setTimeout(function() {
                that.Element.pause();
                that.lastActionTime = Date.now();
                _.util.bool.isFn(onpause) && onpause.call(this);
            }, this.protectTime - duration);
        }
        return this;
    }
    stop(onstop) {
        this.pause(function() {
            this.Element.currentTime = 0;
            _.util.bool.isFn(onstop) && onstop.call(this);
        });
        return this;
    }
    volume(vol) {
        switch (typeof vol) {
            case 'string':
                if (vol == 'up') {
                    var volume = this.Element.volume + 0.1;
                    if (volume >= 1) {
                        volume = 1;
                    }
                    this.Element.volume = volume;
                } else if (vol == 'down') {
                    var volume = this.Element.volume - 0.1;
                    if (volume <= 0) {
                        volume = 0;
                    }
                    this.Element.volume = volume;
                }
                break;
            case 'number':
                if (vol >= 0 && vol <= 1) {
                    this.Element.volume = vol;
                }
                break;
        }
    }
}

this.module.exports = _.media.Player;