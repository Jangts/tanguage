@module;
/*!
 * tanguage framework source code
 *
 * class .medias.Image
 *
 * Date: 2017-04-06
 */

use $ util/;
use $ data/Request;

var _ = pandora,
doc = root.document,
{console, Image} = root;   

var isStr = _.util.isStr,
    isObj = _.util.isObj,
    isFn = _.util.isFn,
    isEl = _.util.isEl,
    load = function(img, src, doneCallback, failCallback) {
        img.src = src;
        img.onload = doneCallback;
        img.onerror = failCallback;
    };

class .media.Image {
    _init(option) {
        var that = this;
        if (isStr(option)) {
            var callback = function() {
                if (isEl(that.context)) {
                    that.context.appendChild(that.image);
                }
            }
            this.src = option;
            this.preview = null;
            this.onload = callback;
            this.onerror = callback;
        } else if (isObj(option)) {
            this.src = option.src;
            this.previewsrc = option.preview;
            var doneCallback = function() {
                    if (isEl(that.context)) {
                        that.context.appendChild(that.image);
                        isFn(option.onload) && option.onload.call(this, that)
                    }
                },
                failCallback = function() {
                    if (isEl(that.context)) {
                        that.context.appendChild(that.image);
                        isFn(option.onerror) && option.onerror.call(this, that)
                    }
                };
            this.onload = doneCallback;
            this.onerror = failCallback;
        } else {
            return;
        }
        this.image = new Image();
        if (option.width) {
            this.image.width = option.width;
        }
        if (option.height) {
            this.image.height = option.height;
        }
        if (option.context) {
            this.appendTo(option.context);
        }
    }
    
    preview() {
        var that = this,
            onload = function() {
                that.context.appendChild(that.image);
                load(that.image, that.src, function() {
                    that.previewsrc = null;
                    that.onload.call(this);
                }, function() {
                    that.image.src = that.previewsrc;
                    that.onerror.call(this);
                });
            },
            onerror = function() {
                load(that.image, that.src, that.onload, that.onerror);
            };
        load(this.image, this.previewsrc, onload, onerror);
    }
    
    appendTo(context) {
        if (isEl(context)) {
            this.context = context;
            if (this.previewsrc) {
                this.preview();
            } else {
                load(this.image, this.src, this.onload, this.onerror);
            }
        }
    }
    
    toString() {
        var div = doc.createElement('div');
        div.appendChild(this.image);
        var html = div.innerHTML;
        div = null;
        delete div;
        return html;
    }
    
    toBase(callback, mime) {
        var img = this.image,
            canvas = doc.createElement('CANVAS'),
            ctx = canvas.getctx('2d');
        img.crossOrigin = 'Anonymous';
        img.onload = function() {
            canvas.height = img.height;
            canvas.width = img.width;
            ctx.drawImage(img, 0, 0);
            var dataURL = canvas.toDataURL(mime || 'image/png');
            callback.call(this, dataURL);
            canvas = null;
        };
        img.src = this.src;
    }
}

this.module.exports = _.media.Image;