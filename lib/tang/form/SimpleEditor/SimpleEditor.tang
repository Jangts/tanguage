/*!
 * tanguage framework source code
 *
 * class forms/SimpleEditor
 * 
 * Date: 2015-09-04
 */
;
tang.init().block([
    '$_/see/fa.css',
    '$_/form/SimpleEditor/style.css',
    '$_/util/bool',
    '$_/dom/Events',
    '$_/form/SimpleEditor/Selection',
    '$_/form/SimpleEditor/util/parameters',
    '$_/form/SimpleEditor/util/builders',
    '$_/form/SimpleEditor/util/checks',
    '$_/form/SimpleEditor/commands/base.cmds',
    '$_/form/SimpleEditor/commands/font.cmds',
    '$_/form/SimpleEditor/commands/header.cmds',
    '$_/form/SimpleEditor/commands/createlink.cmd',
    '$_/form/SimpleEditor/commands/inserttable.cmd',
    '$_/form/SimpleEditor/commands/insertfile.cmd',
    '$_/form/SimpleEditor/commands/insertimage.cmd',
    '$_/form/SimpleEditor/commands/insertvideo.cmd',
    '$_/form/SimpleEditor/commands/insertemoticon.cmd',
    '$_/form/SimpleEditor/commands/insertfragments.cmd',
    '$_/form/SimpleEditor/emoticons/default'
], function(pandora, root, imports, undefined) {
    var _ = pandora,
        declare = pandora.declareClass,

        doc = root.document,
        console = root.console,
        query = _.dom.sizzle || _.dom.selector;

    var SimpleEditors = {};
    @include 'includes/commands';
    @include 'includes/metheds';
    @include 'includes/builders';
    @include 'includes/checks';
    @include 'includes/events';

    // conmands = pandora.storage.get(new _.Identifier('EDITOR_CMDS').toString()),
    // parameters = pandora.storage.get(new _.Identifier('EDITOR_PARAMS').toString()),
    // metheds = pandora.storage.get(new _.Identifier('EDITOR_METHODS').toString()),
    // creators = pandora.storage.get(new _.Identifier('EDITOR_CREATS').toString()),
    // builders = pandora.storage.get(new _.Identifier('EDITOR_BUILDS').toString()),
    // checks = pandora.storage.get(new _.Identifier('EDITOR_CHECKS').toString()),
    // events = pandora.storage.get(new _.Identifier('EDITOR_EVENTS').toString());

    _.dom.events.add(document, 'mouseup', null, null, function() {
        _.each(SimpleEditors, function(id, editor) {
            if (editor.mousedown && editor.mouseout) {
                editor.mousedown = editor.mouseout = false;
                editor.selection.saveRange();
                editor.onchange();
            }

        });
    });

    //Define NameSpace 'form'
    _('form');

    //Declare Class 'form.SimpleEditor'
    /**
     * forms inspection and submission and ect.
     * @class 'SimpleEditor'
     * @constructor
     * @param {Mix, Object }
     */

    declare('form.SimpleEditor', {}, metheds);

    _.extend(_.form, true, {
        careatEditor: function(elem, options) {
            return new _.form.SimpleEditor(elem, options);
        },
        careatEditors: function(selector, options) {
            var editors = [];
            _.each(query(selector), function(i, el) {
                editors.push(_.form.careatEditor(el, options));
            });
            return editors;
        },
        getEditorById: function(id) {
            return id && SimpleEditors[id];
        }
    });
});