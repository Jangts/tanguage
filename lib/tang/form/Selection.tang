@module;

/*!
 * tanguage framework source code
 *
 * class form.Selection
 *
 * Date: 2017-04-06
 */

use ~Range;

var _ = pandora,
doc = root.document,
console = root.console;

class ..form.Selection {
    editor= null;
    range= null;

    _init(editor) {
        this.editor = editor;
    }

    // 恢复选区
    restoreSelection() {
        if (this.range) {
            this.range = new _.form.Range(this.range);
        } else {
            this.createEmptyRange();
        }
    }

    // 获取 range 对象
    getRange() {
        this.restoreSelection();
        return this.range;
    }

    // 保存选区
    saveRange(range) {
        if (!range) {
            // 获取当前的选区
            range = new _.form.Range();
        } else {
            new _.form.Range(range);
        }
        // 判断选区内容是否在编辑内容之内
        var i = 0,
            richareas = this.editor.richareas;
        for (i; i < richareas.length; i++) {
            if (range.isBelongTo(richareas[i])) {
                // 是编辑内容之内
                this.range = range;
                break;
            }
        }
        return this.range;
    }

    // 折叠选区
    collapseRange(toStart) {
        if (this.range) {
            this.range.collapse(toStart);
        }
        return this;
    }

    // 选中区域的文字
    getSelectionText() {
        if (this.range) {
            return this.range.text;
        }
        return '';
    }

    // 选区的 $Elem
    getSelectionContainerElem(range) {
        range = range || this.range;
        if (range) {
            var elem = range.commonNode;
            return (elem != null) && (elem.nodeType === 1 ? elem : elem.parentNode);
        }
    }

    getSelectionStartElem(range) {
        range = range || this.range
        if (range) {
            var elem = range.startNode;
            return (elem != null) && (elem.nodeType === 1 ? elem : elem.parentNode);
        }
    }

    getSelectionEndElem(range) {
        range = range || this.range
        if (range) {
            var elem = range.endNode;
            return (elem != null) && (elem.nodeType === 1 ? elem : elem.parentNode);
        }
    }

    // 选区是否为空
    isSelectionEmpty() {
        if (this.range) {
            return this.range.isEmpty();
        }
        return false
    }

    // 创建一个空白（即 &#8203 字符）选区
    createEmptyRange(index) {
        var editor = this.editor,
            range = new _.form.Range(),
            elem;
        index = parseInt(index) || 0;
        range.selectInput(this.editor.richareas[index], false);
        this.collapseRange().saveRange(range);

        if (!this.isSelectionEmpty()) {
            // 当前选区必须没有内容才可以
            return;
        }

        try {
            // 目前只支持 webkit 内核
            if (_.util.bool.isWebkit()) {
                // 插入 &#8203
                range.insertHTML('&#8203;');
                // 修改 offset 位置
                range.setEnd(range.endNode, range.endOffset + 1);
                // 存储
                range.collapse(false);
            } else {
                var elem = _.dom.createByString('<strong>&#8203;</strong>');
                range.insertElem(elem);
                this.range.selectElem(elem, false);
            }
        } catch (ex) {
            // 部分情况下会报错，兼容一下
        }
    }

    // 根据 $Elem 设置选区
    createRangeByElem(elem, toStart, isContent) {
        if (!elem) {
            return
        }
        this.saveRange(this.range.selectElem(elem, toStart, isContent));
    }
}