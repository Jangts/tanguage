@module;

use $ app/;
use $ util/ as {isFn};

namespace app;

@include 'getConfiguration';
@include 'Route';
@include 'PatternRoute';

listen (path, callback) {
    let route, config = getConfiguration(path);
    if(config.type==='pattern'){
        route = this.routes.pattern[config.uid] || new PatternRoute(config);
    }else {
        route = this.routes.path[config.uid] || new Route(config);
    }
    route.oncall(callback);
    return this;
}

class .Router {
    currentURL;
    routes = {};

    _init (routes) {
        this.routes = {
            path: {},
            pattern: {}
        }
    }

    listen = listen;

    reg = listen;

    refresh (reload = false) {
        let newURL = formatPath(location.hash.slice(1) || '/index');
        if(newURL===this.currentURL){
            if(reload){
                this.call(this.currentURL, true);
            }
        }else{
            this.currentURL = newURL;
            this.call(this.currentURL, true);
        }
    }

    call (path, ignoreFormat) {
        if(!ignoreFormat) path = formatPath(path);

        if(this.routes.path[path]){
            this.routes.path[path].call(path);
        }
        each (this.routes.pattern as id, route) {
            route.call(path);
        }
    }

    bindEvents () {
        root.addEventListener('load',this.refresh.bind(this),false);
        root.addEventListener('hashchange',this.refresh.bind(this),false);
    }
}
