@module;

use $ util/ as {isStr,isEl};
use $ dom/ as dom;
use $ dom/Elements as $;
use $ app/Component as Component;
use $ app/Router/ as Router;

namespace app;

let
_ = pandora,
_$ = _.dom,
__ = _.util,
doc = root.document,
body = doc.body;

@include 'abstracts/View';
@include 'views/AJAXView';
@include 'views/COMView';
@include 'views/FrameView';
@include 'views/NodeView';

@include 'abstracts/Bar';
@include 'views/Buttons';
@include 'views/Title';

@include 'containers/Alert';
@include 'containers/Picker';
@include 'containers/TabNav';
@include 'containers/VirtualPage';
@include 'containers/Widget';

@include 'layers/Layer';
@include 'layers/PopupLayer';
@include 'layers/WidgetsLayer';

class .SPA extends Component {
    // 唯一标识符
    uid;
    // 视图层数组
    layers = [];
    // 默认层（必备）指针
    defaultLayer;
    // 跳出层指针
    popupLayer;
    // 装饰层指针
    widgetsLayer;
    // 应用主路由
    router;
    
    /**
     *
     * @param options {
     *     elem: undifined | HTMLElement | string
     *     layers: [{
     *         tagName: string = 'div'
     *         className: string
     *         pages: {
     *             defaultPage : {
     *                 tagName: string = 'div'  
     *             }
     *         }
     *     }, ...]
     *     popupLayer: null | {}
     *     widgetsLayer: null | {}
     * }
     *
     *
     */
    _init(options = {}){
        // this.uid = 'SPA-' + (new _.Identifier().toString());
        // 可简写为如下
        this.uid = 'SPA-' + _.Identifier().toString();
        // 视图层数组
        this.layers = [];

        // 激活DOM对象
        // 是否传入DOM对象
        if(isEl(options.elem)){
            this.HTMLElement = options.elem;
            scanLayer (this, options);
        }
        // 是否传入DOM对象选择器指令
        else if (isStr(options.elem)&&$(options.elem).length){
            this.HTMLElement = $(options.elem).get(0);
            scanLayer (this, options);
        }
        // 创建并激活DOM对象
        else{
            // clog doc;
            this.HTMLElement = dom.create('div', body, {
                id: this.uid,
                className: 'tanguage-spa'
            });
            this.defaultLayer = createLayer (this, 'default', options.layers && options.layers['default'] || defaultLayerOptions);
        }

        // 检查默认层
        // 如果不存在默认层指针，则创建默认层
        if(!this.defaultLayer){
           this.defaultLayer = createLayer (this, options.layers && options.layers['index'] || defaultLayerOptions);
        }

        // 增加默认层
        if(options.popupLayer){
            this.popupLayer = createPopupLayer (this, options.popupLayer || popupLayerOptions);
        }
        // 增加装饰层
        if(options.widgetsLayer){
            this.widgetsLayer = createWidgetLayer (this, options.widgetsLayer || widgetsLayerOptions);
        }
        this.router = new Router;
    }

    addLayer () {
        this.layers.push(new Layer());
    }

    addWidgets() {
        if(!this.widgetsLayer){
            this.widgetsLayer = createWidgetLayer (this, widgetsLayerOptions);
        }
    }

    addPickComponnet () {
        if(!this.popupLayer){
            this.popupLayer = createWidgetLayer (this, popupLayerOptions);
        }
    }

    pick () {
        
    }

    alert () {
        if(!this.popupLayer){
            this.popupLayer = createWidgetLayer (this, popupLayerOptions);
        }
    }
}

module.exports = app.SPA;