class Layer extends Component {
    appInstance
    pages = {};

    _init(app, elem, options) {
        this.app = app;
        this.HTMLElement = elem;
        this.name = _$.getAttr(elem, 'data-layer-name');
        this.$pages = $('.spa-pages', elem);
        this.$tools = $('.spa-tools', elem);
        this.$loading = $('.spa-loading', elem);
        clog options;
        each (options.pages as pageName, pageOptions) {
            createPage (this, pageName, pageOptions);
        }
    }

    toTop() {}

    toBottom() {}

    addPage () {

    }

    removePage () {
        
    }
}

scanLayer (app) {
    let
    layers = {},
    elem = app.HTMLElement;

    each (elem.childNodes as index, node) {
        if(dom.hasAttr(node, 'data-layer-name')){
            let layerName = dom.getAttr(node, 'data-layer-name');
            if(layers[layerName]){
                dom.remove(node, elem);
                return;
            }

            layers[layerName] = new Layer({
                uid: layerName,
                HTMLElement: node
            });
            if(index===0){
                app.defaultLayer = layers[layerName];
            }
        }else{
            dom.remove(node, elem);
        }
    }
}

let
defaultLayerOptions = {
    tagName: 'div',
    className: '',
    pages: {
        '/index/' : defaultPageOptions
    }
},
emptyLayerOptions = {
    tagName: 'div',
    className: '',
    pages: {}
};

createLayer (app, layerName, layerOptions) {
    let elem;
    // if(dom.contain(app.HTMLElement, layerOptions.elem)){}
    if(__.in(layerOptions. elem, app.HTMLElement.childNodes)){
        elem = layerOptions.elem;
    }else{
        elem = dom.create(layerOptions.tagName || 'div', app.HTMLElement, {
            className: 'spa-layer',
            dataLayerName: layerName,
            html:'<div class="spa-pages"></div><div class="spa-loading"></div><div class="spa-tools"></div>'
        });
    }
    let layer = new Layer(app, elem, layerOptions);
    app.layers[layerName] = layer;
    return layer;
}