@module;
/*!
 * tanguage framework source code
 *
 * class obj.Observer
 *
 * Date 2017-04-06
 */
;

use $ util/ as u;

var _ = pandora,
console = root.console,
isFn = u.isFn;

@include 'Observer/Subscriber';
@include 'Observer/Listener';

observe(data) {
    if (data && typeof data === 'object') {
        return new Observer(data);
    }
    return false;
}
activeListen(observer, key, val) {
    var subscriber = new Subscriber();
    observe(val);
    Object.defineProperty(observer.data, key, {
        enumerable: true,
        configurable: true,
        get() {
            if (observer.listener) {
                subscriber.watch(observer.listener);
            } else if (observer.silently === false) {
                subscriber.notify(false, false);
            }
            return val;
        },
        set(value) {
            if (value === val) {
                return;
            }
            val = value;
            _.util.isObj(value) && observe(value);
            if (observer.silently === false) {
                subscriber.notify(true, false);
            } else {
                subscriber.notify(true, true);
            }
        }
    });
}
    
/**
 * 创建一个基本对象的观察对象
 * 
 * @param   {Object}    data        需要被观察的对象（数据）
 * 
 */
class Observer {
    listener = null;
    silently = false;
    _init(data) {
        this.data = data;
        this.walk(data);
    }
    walk(data) {
        each(data as key, val) {
            if (data.hasOwnProperty(key)) {
                activeListen(this, key, val, true);
            }
        }
        data._observer = this;
    }
    listen(property, writeCallback, readCallback) {
        if (_.util.isStr(property) && _.util.hasProp(this.data, property)) {
            return new Listener(this, property, writeCallback, readCallback);
        }
        if (_.util.isFn(property)) {
            readCallback = writeCallback;
            writeCallback = property;
        }
        _.each(this.data, function(property) {
            if (property !== '_observer' && _.util.hasProp(this.data, property)) {
                new Listener(this, property, writeCallback, readCallback);
            }
        }, this);
    }
    on(eventType, property, callback) {
        if (eventType === 'read') {
            return new Listener(this, property, null, callback);
        }
        if (eventType === 'read') {
            return new Listener(this, property, callback, null);
        }
    }

    static create: observe
}

namespace obj with {observe, Observer}