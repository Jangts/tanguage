@module;

/*!
 * tanguage framework source code
 *
 * static obj
 *
 * Date 2017-04-06
 */
;

var _ = pandora,
doc = root.document,
console = root.console;

deepMerge (obj1, obj2) {
    if (obj1 && obj2) {
        each(obj2 as key, val) {
            if ((typeof obj1[key] === 'object') && (typeof val === 'object') && !(obj1[key] instanceof Array) && !(val instanceof Array)) {
                obj1[key] = deepMerge(obj1[key], val)
            } else {
                obj1[key] = val;
            }
        }
    } else {
        obj1 = obj2;
    }
    return obj1;
}
toArray(obj) {
    var result = [];
    each(obj as index, elem) {
        result.push(elem);
    }
    return result
}
toQueryString(obj) {
    obj = obj || {};
    var fields = []
    for (var i in obj) {
        fields.push(i + "=" + encodeURIComponent(obj[i]));
    }
    return fields.join("&");
}

namespace obj with {
    hasProp(obj, property) {
        return obj && obj.hasOwnProperty && obj.hasOwnProperty(property);
    },
    merge() {
        if (arguments.length > 0) {
            var object = {};
            for (var a = 0; a < arguments.length; a++) {
                if (typeof arguments[a] == 'object') {
                    each(arguments[a] as index, elememt) {
                        object[index] = elememt;
                    }
                }
            }
        } else {
            var object = {};
        }
        return object;
    },
    deepMerge(obj1, obj2) {
        var object = {};
        if ((typeof obj1 === 'object') && (typeof obj2 === 'object') && !(obj1 instanceof Array) && !(obj2 instanceof Array)) {
            if (obj1 && obj2) {
                object = _.copy(obj1);
                each(obj2 as key, val) {
                    if ((typeof object[key] === 'object') && (typeof val === 'object') && !(object[key] instanceof Array) && !(val instanceof Array)) {
                        object[key] = deepMerge(object[key], val)
                    } else {
                        object[key] = val;
                    }
                }
            } else if (obj1) {
                object = _.copy(obj1);
            } else if (obj2) {
                object = _.copy(obj2);
            } else {
                object = {};
            }
            return object;
        } else {
            _.error('Parameters must be two objects.');
        }
    },
    type(object, isDetail) {
        if (isDetail) {
            return _.util.gettype(object);
        } else {
            return typeof object;
        }
    },
    length(object, ownpropsonly) {
        var num = 0;
        for (var k in object) {
            if (ownpropsonly) {
                if (object.hasOwnProperty(k)) {
                    num++;
                }
            } else {
                num++;
            }
        }
        return num;
    },
    clone: ..clone,
    has(object, elem) {
        for (var k in object) {
            if (object[k] == elem) return k;
        }
        return false;
    },
    toArray,
    toString(obj) {
        return obj == null ? '' : typeof obj === 'object' ? JSON.stringify(obj, null, 2) : String(obj);
    },
    toQueryString,
    valuesArray: toArray,
    keysArray(object) {
        var array = [];
        each(object as key,) {
            array.push(key);
        }
        return array;
    },
    encodeQueryString: toQueryString,
    decodeQueryString(str) {
        str = str.replace(/^(#|\?)/, '');
        var data = {};
        var fields = str.split('&');
        var i = 0,
            filed;
        for (i; i < fields.length; i++) {
            filed = fields[i].split('=');
            data[filed[0]] = filed[1];
        }
        return data;
    }
}