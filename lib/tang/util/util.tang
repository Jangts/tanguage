@module;
/*!
 * tanguage framework source code
 *
 * static util
 *
 * Date 2017-04-06
 */
// namespace util;

use $ dom/;
use $ obj/;

var _ = pandora,
doc = root.document,
{console, File, FileList, FormData} = root;

@include 'type';

ns util with {
    IntExpr,
    gettype,
    nativetype,
    fastype (obj) {
        return Object.prototype.toString.call(obj).replace(/\[object\s|\]/g, '');
    },
    typeOfObj,
    typeOfStr,
    truthy(value) {
        return !!value
    },
    is(obj, __class) {
        // log __class;
        return _.util.isObj(obj) && obj instanceof __class;
    },
    isObj(obj) {
        return typeof obj === 'object' && obj;
    },
    isGlobal,
    isWin: isGlobal,
    isDoc,
    isElement,
    isEl: isElement,
    isVisi(elem) {
        return _.dom.getStyle(elem, 'display') != 'none';
    },
    isHide(elem) {
        return _.dom.getStyle(elem, 'display') === 'none';
    },
    isElements,
    isEls: isElements,
    isArray,
    isArr: isArray,
    isFile(file) {
        return _.util.isObj(file) && file instanceof File;
    },
    isFiles(files) {
        return _.util.isObj(files) && files instanceof FileList;
    },
    isForm(data) {
        return _.util.isObj(data) && data instanceof FormData
    },
    isNul(obj) {
        if (obj) {
            return false;
        } else {
            return true;
        }
    },
    isStr(str) {
        return typeof str === 'string';
    },
    isIntStr,
    isFloatStr,
    isOuterHTML(str) {
        return /^<(\w+)[\s\S]+<\/\1>$/.test(str) || /^<(\w+)[^>]*\/\s*>$/.test(str);
    },
    isPercent(str) {
        return (typeof str === 'string') && (/^[-\+]{0,1}(\d+(\.\d+){0,1}|\.\d+)\%$/.test(str));
    },
    isUrl(str) {
        var strRegex = "^((https|http|ftp|rtsp|mms|wss|ws)?://)"
            +
            "?(([0-9a-z_!~*'().&=+$%-]+: )?[0-9a-z_!~*'().&=+$%-]+@)?" //ftp的user@
            +
            "(([0-9]{1,3}\.){3}[0-9]{1,3}" // IP形式的URL- 199.194.52.184
            +
            "|" // 允许IP和DOMAIN（域名）
            +
            "([0-9a-z_!~*'()-]+\.)*" // 域名- www.
            +
            "([0-9a-z][0-9a-z-]{0,61})?[0-9a-z]\." // 二级域名
            +
            "[a-z]{2,6})" // first level domain- .com or .museum
            +
            "(:[0-9]{1,4})?" // 端口- :80
            +
            "((/?)|" // a slash isn't required if there is no file name
            +
            "(/[0-9a-z_!~*'().;?:@&=+$,%#-]+)+/?)$";
        var re = new RegExp(strRegex);
        if (re.test(str)) {
            return true;
        } else {
            return false;
        }
    },
    isHttpMethod(method) {
        if (typeof method !== 'string') {
            return false;
        }
        method = method.toUpperCase();
        return _.util.inArr(method, ['GET', 'CONNECT', 'COPY', 'DELETE', 'HEAD', 'LINK', 'OPTIONS', 'POST', 'PUT', 'PATCH', 'TRACE', 'UNLINK', 'UPDATE', 'WRAPPED']) && method;
    },
    isRegExp,
    isReg: isRegExp,
    isInt(num) {
        return _.util.isInteger(num) || _.util.isIntStr(num);
    },
    isNum(num) {
        return typeof num === 'number';
    },
    isNumber(num) {
        return !isNaN(parseFloat(num)) && isFinite(num);
    },
    isFinite(num) {
        return isFinite(num);
    },
    isNumeric(num) {
        return typeof num === 'number' || _.util.isIntStr(num) || _.util.isFloatStr(num);
    },
    isInteger,
    isScala(vari) {
        return typeof vari === 'boolean' || typeof vari === 'string' || typeof vari === 'number';
    },
    isBool(vari) {
        return typeof vari === 'boolean';
    },
    isFn(obj) {
        return typeof obj === 'function';
    },    
    
    // 是否支持Canvas
    isSupportCanvas() {
        return typeof CanvasRenderingContext2D != "undefined";
    },
    // 是否 webkit
    isWebkit() {
        const reg = /webkit/i
        return reg.test(this._ua)
    },
    // 是否 IE
    isIE() {
        return 'ActiveXObject' in window
    },
    isAndroid() {
        var android = false;
        var sAgent = navigator.userAgent;

        if (/android/i.test(sAgent)) { // android
            android = true;
            var aMat = sAgent.toString().match(/android ([0-9]\.[0-9])/i);

            if (aMat && aMat[1]) {
                android = parseFloat(aMat[1]);
            }
        }
        return android;
    },
    hasProp: _.obj.hasProp,
    hasStr: _.hasString,
    in(elem, object) {
        if (_.util.isArray(object)) {
            return _.arr.has(object, elem);
        }
        if (_.util.isObj(object)) {
            return _.obj.has(object, elem);
        }
        return false;
    },
    inArr(elem, array, ignoreType) {
        if (ignoreType) {
            for (var i = 0; i < array.length; i++) {
                if (array[i] == elem) {
                    return true;
                };
            };
            return false;
        }
        return _.arr.has(array, elem);
    }
}

..extend(root, ..util);
this.module.exports = ..util;