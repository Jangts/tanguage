@module;
/*!
* tanguage framework source code
*
* static util.type
*
* Date 2017-04-06
*/
namespace util;

var _ = pandora,
doc = root.document,
console = root.console;

//对象子类型判断
typeofObj (object) {
    if (!object) {
        return 'Null';
    }
    if (isGlobal(object)) {
        return 'Global';
    }
    if (isDoc(object)) {
        return 'HTMLDocument';
    }
    if (isElement(object)) {
        return 'Element';
    }
    if (isElements(object)) {
        return 'Elements';
    }
    if (isArray(object)) {
        return 'Array';
    }
    if (isRegExp(object)) {
        return 'RegExp';
    }
    return nativeType(object);
}

nativeType(object) {
    if (!object) {
        return 'Null';
    }
    var match = Object.prototype.toString.call(object).match(/\[object (\w+)\]/);
    if (match) {
        return match[1];
    }
    return 'Object';
}

var isGlobal = (object) {
    return object === window;
};

var isDoc = (object) {
    return object === document;
};

var isElement = (object) {
    return object && typeof object === 'object' && ((HTMLElement && (object instanceof HTMLElement)) || (object.nodeType === 1) || (DocumentFragment && (object instanceof DocumentFragment)) || (object.nodeType === 11));
};

var isElFragment = (object) {
    return object && typeof object === 'object' && ((DocumentFragment && (object instanceof DocumentFragment)) || (object.nodeType === 11));
};

var isElements = (object) {
    if (object && typeof object === 'object') {
        if (HTMLCollection && (object instanceof HTMLCollection)) {
            return true;
        }
        if (NodeList && (object instanceof NodeList)) {
            return true;
        }
        if ((object instanceof Array) || (Object.prototype.toString.call(object) === '[object Array]') || ((typeof(object.length) === 'number') && ((typeof(object.item) === 'function') || (typeof(object.splice) != 'undefined')))) {
            for (var i = 0; i < object.length; i++) {
                if (!isElement(object[i])) {
                    return false;
                }
            };
            return true;
        }
    }
};

var isArray = (object) {
    return Object.prototype.toString.call(object) === '[object Array]';
};

var isRegExp = (object) {
    return object instanceof RegExp;
};

//字符串子类型判断
var typeofStr = (string) {
    if (isIntStr(string)) {
        return 'StringInteger';
    }
    if (isFloatStr(string)) {
        return 'StringFloat';
    }
    return 'String';
};

var IntExpr = /^(\+|-)?\d+$/;

var isIntStr = (string) {
    return IntExpr.test(string)
};

var isFloatStr = (string) {
    if (/^[-\+]{0,1}[\d\.]+$/.test(string)) {
        if (string.split('.').length === 2 && string.split('.')[1] != '') {
            return true;
        }
    }
    return false;
};

var isInteger = (number) {
    if (typeof Number.isInteger === 'function') {
        return Number.isInteger(number);
    } else {
        return Math.floor(number) === number;
    }
}

_('util.type', (object, subtype) {
    switch (typeof object) {
        case 'object':
            return subtype ? typeofObj(object) : (object == null ? 'Null' : ((typeofObj(object) === 'Array') ? 'Array' : 'Object'));

        case 'function':
        case 'boolean':
        case 'undefined':
            return (typeof object).replace(/(\w)/, function(v) {
                return v.toUpperCase();
            });

        case 'number':
            return subtype ? (isInteger(object) ? 'Integer' : 'Float') : 'Number';

        case 'string':
            return subtype ? typeofStr(object) : 'String';
    }
});

_('util.fasttype', (obj) {
    return Object.prototype.toString.call(obj).replace(/\[object\s|\]/g, '');
});

ns type with {
    Obj: typeofObj,
    Str: typeofStr,
    isGlobal: isGlobal,
    isWin: isGlobal,
    isDoc: isDoc,
    isElement: isElement,
    isElements: isElements,
    isArray: isArray,
    isRegExp: isRegExp,
    IntExpr: IntExpr,
    isIntStr: isIntStr,
    isFloatStr: isFloatStr,
    isInteger: isInteger
}

namespace type.Obj {
    public native = nativeType;
}

this.module.exports = _.util.type;