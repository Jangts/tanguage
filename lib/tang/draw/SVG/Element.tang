@module;
/*!
 * tanguage framework source code
 *
 * class SVG
 *
 * Date: 2017-04-06
 */
;
use $ util/
use $ dom/Events

namespace draw.SVG;

var _ = pandora,
doc = root.document,
{console, location} = root;

class .HTMLElement {
    _init(type, data, target) {
        var types = ['svg', 'rect', 'circle', 'eliipse', 'line', 'path', 'g', 'text', 'tspan', 'defs', 'use', 'textpath', 'linearGradient', 'radialGradient', 'stop'];
        if (!type || types.indexOf(type) == -1) {
            type = 'svg';
        }
        type = type || 'svg';
        this.HTMLElement = doc.createElementNS('http://www.w3.org/2000/svg', type);
        if (_.util.gettype(data) === 'Object') {
            _.each(data, function(attr, value) {
                this.attr(attr, value);
            }, this);
        }
        if (_.util.isEl(target)) {
            this.target = target;
            this.target.appendChild(this.HTMLElement);
        }
    }
    attr(attr, value) {
        if (attr.match(/^xlink:/i)) {
            this.HTMLElement.setAttributeNS('http://www.w3.org/1999/xlink', attr, value);
        } else {
            if (attr == 'styles') {
                _.each(value, function(attr, val) {
                    this.css(attr, val);
                }, this);
            } else {
                this.HTMLElement.setAttribute(attr, value);
            }
        }
        return this;
    }
    css(attr, value) {
        _.dom.setStyle(this.HTMLElement, attr, value);
        return this;
    }
    fire(elem, event, eventType) {
        this.Events && this.Events.fire(event, eventType);
        return this;
    }
    on(eventType, selector, data, handler) {
        switch (arguments.length) {
            case 3:
                handler = _.util.isFn(data) ? data : undefined;
                data = null;
                break;
            case 2:
                handler = _.util.isFn(selector) ? data : undefined;
                selector = null;
                data = null;
                break;
        };
        if (this.HTMLElement && handler) {
            if (!this.Events) {
                this.Events = new _.dom.Events(this.HTMLElement);
            }
            this.Events.push(eventType, selector, data, handler);
        }
        return this;
    }
    off(elem, eventType, selector, handler) {
        if (this.Events) {
            if (handler) {
                this.Events.removeHandler(eventType, selector, handler);
            } else {
                if (eventType && typeof selector != 'undefined') {
                    this.Events.removeSelector(eventType, selector);
                } else {
                    if (eventType) {
                        this.Events.removeType(eventType);
                    } else {
                        this.Events.remove();
                    }
                }
            }
        }
        return this;
    }
    bind(eventType, data, handler) {
        if (arguments.length == 2) {
            handler = _.util.isFn(data) ? data : undefined;
            data = undefined;
        }
        return this.on(eventType, null, data, handler);
    }
    unbind(eventType, handler) {
        return this.off(eventType, null, handler);
    }
    hover(overCallback, outCallback) {
        return this.on('mouseover', null, null, overCallback).on('mouseout', null, null, outCallback || overCallback);
    }
}

this.module.exports = SVG.HTMLElement;