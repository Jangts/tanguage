@module;
/*!
 * tanguage framework source code
 *
 * extend_static_methods graphic/canvas
 *
 * Date: 2017-04-06
 */
;
use $ util/
use $ dom/
use $ draw/SVG/Element as SVGElement

namespace draw;

var _ = pandora,
doc = root.document,
{console, location} = root;

// clog SVGElement;

getGeoPathStr(coordinate, i, svg, type) {
    coordinate = svg.coordinateSwitch(coordinate, type);
    if (i == 0) {
        return 'M' + coordinate[0] + ',' + coordinate[1];
    } else {
        return 'L' + coordinate[0] + ',' + coordinate[1];
    }
}

const types = {
    Long (coordinate, mapCenter, scale, center) {
        return (coordinate[0] - mapCenter) * scale + center;
    },
    CosLat (coordinate, mapCenter, scale, center) {
        return Math.cos(2 * Math.PI / 360 * coordinate[1]) * (coordinate[0] - mapCenter) * scale + center;
    },
    World (coordinate, mapCenter, scale, center) {
        return (1 - Math.sin(2 * Math.PI / 360 * Math.abs(coordinate[1])) * Math.abs(coordinate[1]) / 180 * Math.abs(coordinate[1]) / 90) * (coordinate[0] - mapCenter) * scale + center;
    }
};

class .SVG {
    Element
    _init (rootnode, width, height) {
        if (_.util.isEl(rootnode)) {
            this.HTMLElement = rootnode;
            this.width = width || 800;
            this.height = height || 600;
            var SVG = new SVGElement('svg', { width: width, height: height }, rootnode);
            each(SVG as index, value) {
                this[index] = value;
            }
        }
    }
    rect (x, y, width, height, data) {
        var rect = new SVGElement('rect', {
            x: x,
            y: y,
            width: width,
            height: height
        }, this.HTMLElement);
        if (data) {
            each(data as attr, ) {
                rect.attr(attr, this);
            }
        }
        return rect;
    }
    circle (cx, cy, r, data) {
        var circle = new SVGElement('circle', {
            cx: cx,
            cy: cy,
            r: r
        }, this.HTMLElement);
        if (data) {
            each(data as attr, ) {
                circle.attr(attr, this);
            }
        }
        return circle;
    }
    eliipse (cx, cy, rx, ry, data) {
        var eliipse = new SVGElement('eliipse', {
            cx: cx,
            cy: cy,
            rx: rx,
            ry: ry
        }, this.HTMLElement);
        if (data) {
            each(data as attr, ) {
                eliipse.attr(attr, this);
            }
        }
        return eliipse;
    }
    line (x1, y1, x2, y2, data) {
        var line = new SVGElement('line', {
            x1: x1,
            y1: y1,
            x2: x2,
            y2: y2
        }, this.HTMLElement);
        if (data) {
            each(data as attr, ) {
                line.attr(attr, this);
            }
        }
        return line;
    }
    path (pathString, data) {
        var path = new SVGElement('path', {
            d: pathString
        }, this.HTMLElement);
        if (data) {
            each(data as attr, ) {
                path.attr(attr, this);
            }
        }
        return path;
    }
    text (x, y, textContent, data) {
        var text = new SVGElement('text', {
            x: x,
            y: y,
        }, this.HTMLElement);
        text.HTMLElement.textContent = textContent;
        if (data) {
            each(data as attr, ) {
                text.attr(attr, this);
            }
        }
        text.span = function(x, y, textContent, data) {
            var tspan = new SVGElement('tspan', {
                x: x,
                y: y,
            }, text.HTMLElement);
            tspan.HTMLElement.textContent = textContent;
            if (data) {
                each(data as attr, ) {
                    tspan.attr(attr, this);
                }
            }
        };
        return text;
    }
    sharp () {

    }
}

public geo = (rootnode, width, height, data, range, after, type) {
    var svg = new _.draw.SVG(rootnode, width, height);
    var svgRate = width / height,
        mapRate = (range.rb[0] - range.lt[0]) / (range.lt[1] - range.rb[1]),
        center = width / 2;
    if (svgRate > mapRate) {
        var mapWidth = height * mapRate,
            mapHeight = height,
            top = 0;
    } else {
        var mapWidth = width,
            mapHeight = width / mapRate,
            top = (height - mapHeight) / 2;
    }
    var scale = mapWidth / (range.rb[0] - range.lt[0]),
        mapCenter = (range.rb[0] + range.lt[0]) / 2;
    svg.coordinateSwitch = function(coordinate, type) {
        type = type || 'CosLat';
        var x = types[type] ? types[type](coordinate, mapCenter, scale, center) : types.CosLat(coordinate, mapCenter, scale, center),
            y = (range.lt[1] - coordinate[1]) * scale + top;
        return [x, y];
    }
    each(data as i, place) {
        var pathStr = '',
            coordinates = place["geometry"]["coordinates"];
        each(coordinates as i, coordinate) {
            if (_.util.isNum(coordinate[0][0])) {
                each(coordinates[i] as n, array) {
                    pathStr += getGeoPathStr(array, n, svg, type);
                }
            } else if (_.util.isNum(coordinate[0][0][0])) {
                each(coordinates[i][0] as n, array) {
                    pathStr += getGeoPathStr(array, n, svg, type);
                }
            }
        }
        var path = svg.path(pathStr);
        after.call(svg, i, path, place["type"], place["properties"]);
    }
    return svg;
};

this.module.exports = draw.SVG;
