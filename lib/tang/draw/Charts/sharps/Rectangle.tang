@module;
/*!
 * tanguage framework source code
 * Date: 2015-09-04
 */
;
use $ draw/canvas as canvas;

namespace draw.Charts;

let
_ = pandora,
doc = root.document,
console = root.console;

class .sharps.Rectangle extends Charts.Component {
    ctx
    type = 0
    radius = 0
    x1 = 0
    y1 = 0
    x2 = 0
    y2 = 0

    draw () {
        switch (this.type) {
            case 0:
            case 2:
                this.drawVertical();
                break;
            case 1:
            case 3:
                this.drawHorizontal();
                break;
        }
    }

    drawVertical () {
        var ctx = this.ctx,
            halfWidth = this.radius,
            leftX = this.x1 - halfWidth,
            rightX = this.x2 + halfWidth,
            startY = this.y1,
            endY = this.y2,
            halfStroke = this.strokeWidth / 2;

        // Canvas doesn't allow us to stroke inside the width so we can
        // adjust the sizes to fit if we're setting a stroke on the line
        if (this.showStroke) {
            leftX += halfStroke;
            rightX -= halfStroke;
            endY = (endY < startY) ? endY + halfStroke : endY - halfStroke;
            if (this.type === 2) {
                startY = (endY < startY) ? startY - halfStroke : startY + halfStroke;
            }
        }

        //console.log(this.x1, this.y1, this.x2, this.y2);

        ctx.fillStyle = this.fillColor;
        ctx.strokeStyle = this.strokeColor;
        ctx.lineWidth = this.strokeWidth;

        // It'd be nice to keep this class totally generic to any rectangle
        // and simply specify which border to miss out.
        canvas.line(ctx, leftX, startY, leftX, endY, false, false, (to)=>{
            to(ctx, rightX, endY, 1);
            to(ctx, rightX, startY, 1);
            if (this.type === 2) {
                to(ctx, leftX, startY, 1);
            }
            ctx.fill();
            if (this.showStroke) {
                ctx.stroke();
            }
        });        
    }

    drawHorizontal () {
        var ctx = this.ctx,
            halfHeight = this.radius,
            startX = this.x1,
            endX = this.x2,
            topY = this.y1 - halfHeight,
            bottomY = this.y2 + halfHeight,
            halfStroke = this.strokeWidth / 2;

        // Canvas doesn't allow us to stroke inside the width so we can
        // adjust the sizes to fit if we're setting a stroke on the line
        if (this.showStroke) {
            topY += halfStroke;
            bottomY -= halfStroke;
            endX = (endX > startX) ? endX - halfStroke : endY + halfStroke;
            if (this.type === 4) {
                startX = (endX > startX) ? startX + halfStroke : startX - halfStroke;
            }
        }

        ctx.fillStyle = this.fillColor;
        ctx.strokeStyle = this.strokeColor;
        ctx.lineWidth = this.strokeWidth;

        // It'd be nice to keep this class totally generic to any rectangle
        // and simply specify which border to miss out.
        canvas.line(ctx, startX, topY, endX, topY, false, false, (to)=>{
            to(ctx, endX, bottomY, 1);
            to(ctx, startX, bottomY, 1);
            if (this.type === 2) {
                to(ctx, startX, topY, 1);
            }
            ctx.fill();
            if (this.showStroke) {
                ctx.stroke();
            }
        }); 
    }

    hasValue () {
        return ..util.isNumber(this.value2);
    }

    inRange (X, Y) {
        switch (this.type) {
            case 0:
            case 2:
                return ((X >= (this.x1 - this.radius / 2)) && (X <= (this.x1 + this.radius / 2))) && ((Y >= this.y1 && Y <= this.y2) || (Y <= this.y1 && Y >= this.y2));
                break;
            case 1:
            case 3:
                return ((Y >= (this.y1 - this.radius / 2)) && (Y <= (this.y1 + this.radius / 2))) && ((X >= this.x1 && X <= this.x2) || (X <= this.x1 && X >= this.x2));
                break;
        }
    }
}