@module;
/*!
 * tanguage framework source code
 * Date: 2015-09-04
 */
;
namespace draw.Charts;

let
_ = pandora,
doc = root.document,
console = root.console,

helpers = Charts.helpers;

class .sharps.Arc extends Charts.Component {
    inRange (chartX, chartY) {
        var pointRelativePosition = helpers.getAngleFromPoint(this, {
            x: chartX,
            y: chartY
        });

        // Normalize all angles to 0 - 2*PI (0 - 360Â°)
        var pointRelativeAngle = pointRelativePosition.angle % (Math.PI * 2),
            startAngle = (Math.PI * 2 + this.startAngle) % (Math.PI * 2),
            endAngle = (Math.PI * 2 + this.endAngle) % (Math.PI * 2) || 360;

        // Calculate wether the pointRelativeAngle is between the start and the end angle
        var betweenAngles = (endAngle < startAngle) ? pointRelativeAngle <= endAngle || pointRelativeAngle >= startAngle : pointRelativeAngle >= startAngle && pointRelativeAngle <= endAngle;

        //Check if within the range of the open/close angle
        var withinRadius = (pointRelativePosition.distance >= this.innerRadius && pointRelativePosition.distance <= this.outerRadius);

        return (betweenAngles && withinRadius);
        //Ensure within the outside of the arc centre, but inside arc outer
    }

    tooltipPosition () {
        var centreAngle = this.startAngle + ((this.endAngle - this.startAngle) / 2),
            rangeFromCentre = (this.outerRadius - this.innerRadius) / 2 + this.innerRadius;
        return {
            x: this.x + (Math.cos(centreAngle) * rangeFromCentre),
            y: this.y + (Math.sin(centreAngle) * rangeFromCentre)
        };
    }

    draw (animationPercent) {
        var easingDecimal = animationPercent || 1;

        var ctx = this.ctx;

        ctx.beginPath();

        ctx.arc(this.x, this.y, this.outerRadius < 0 ? 0 : this.outerRadius, this.startAngle, this.endAngle);

        ctx.arc(this.x, this.y, this.innerRadius < 0 ? 0 : this.innerRadius, this.endAngle, this.startAngle, true);

        ctx.closePath();
        ctx.strokeStyle = this.strokeColor;
        ctx.lineWidth = this.strokeWidth;

        ctx.fillStyle = this.fillColor;

        ctx.fill();
        ctx.lineJoin = 'bevel';

        if (this.showStroke) {
            ctx.stroke();
        }
    }
}