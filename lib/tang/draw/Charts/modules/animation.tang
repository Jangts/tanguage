@module;
/*!
 * tanguage framework source code
 * Date: 2015-09-04
 */
;
use $ math/ as math;
use $ draw/Charts/ as Charts;

namespace draw;

let
_ = pandora,
doc = root.document,
console = root.console,

helpers = draw.Charts.helpers,
{requestAnimFrame, cancelAnimFrame} = helpers,
animations = [];

findNextWhere (arrayToSearch, filterCallback, startIndex) {
    // Default to start of the array
    if (!startIndex) {
        startIndex = -1;
    }
    for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
        var currentItem = arrayToSearch[i];
        if (filterCallback(currentItem)) {
            return currentItem;
        }
    }
}

@include 'models/Animation';

expands .Charts {
    dropFrames = 0

    addAnimation (duration) {
        var animationObject = new Animation();
        animationObject.animationDuration = duration || this.options.animationDuration || 1000;
        animationObject.frames = Math.ceil(animationObject.animationDuration * animationObject.fps / 1000);
        animationObject.frameDuration = 1000 / animationObject.fps;
        animationObject.easing = this.options.animationEasing;

        // render (
        animationObject.render = (instance, animation) {
            var easingFunction = math.easing.all[animation.easing];
            var stepDecimal = animation.curFrame / animation.frames;
            var easeDecimal = easingFunction(stepDecimal, 0, 1, 1);
            instance.draw(easeDecimal, stepDecimal, animation.curFrame);
        };
        // user events
        animationObject.onAnimationProgress = this.options.onAnimationProgress;
        animationObject.onAnimationComplete = this.options.onAnimationComplete;
        for (var index = 0; index < animations.length; ++index) {
            if (animations[index].chartInstance === this) {
                // replacing an in progress animation
                animations[index].animationObject = animationObject;
                return;
            }
        }

        animations.push({
            chartInstance: this,
            animationObject: animationObject
        });

        // If there are no animations queued, manually kickstart a digest, for lack of a better word
        if (animations.length == 1) {
            requestAnimFrame(() {
                animationObject.digestWrapper();
            }, animationObject.fps);
        }
    }

    // Cancel the animation for a given chart instance
    cancelAnimation () {
        var index = findNextWhere(animations, (animationWrapper) {
            return animationWrapper.chartInstance === this;
        });

        if (index) {
            animations.splice(index, 1);
        }
    }
}