@module;
/*!
 * tanguage framework source code
 * Date: 2015-09-04
 */

use $ util/

namespace draw

var _ = pandora,
doc = root.document,
{console, location} = root;

getBeveling (x, y) {
    return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
}

checkX (ctx, x){
    if(x < 0){
        return 0;
    }
    else if(x > ctx.canvas.width){
        return ctx.canvas.width;
    }
    return x;
}
checkY (ctx, y){
    if(y < 0){
        return 0;
    }
    else if(y > ctx.canvas.height){
        return ctx.canvas.height;
    }
    return y;
}

namespace canvas with {
    to (ctx, x, y, method = 'move'){
        // clog ctx;
        x = checkX(ctx, x);
        y = checkY(ctx, y);

        switch (method) {
            case 1:
            case '1':
            case 'line':
                ctx.lineTo(x, y);
                break;

            case 2:
            case '2':
            case 'stroke':
                ctx.lineTo(x, y);
                ctx.stroke();
                break;
            
            default:
                ctx.moveTo(x, y);
                break;
        }
    },
    line (ctx, x1, y1, x2, y2, stroke, smooth, beforeClose){
        ctx.beginPath();
        if(smooth){
            x = checkX(ctx, x1);
            y = checkY(ctx, y1);
            x = checkX(ctx, x2);
            y = checkY(ctx, y2);
            ctx.quadraticCurveTo(x1, y1, x2, y2);
            stroke && ctx.stroke();
        }else{
            draw.canvas.to(ctx, x1, y1, 0);
            draw.canvas.to(ctx,x2, y2, (stroke ? 2 : 1));
        }
        beforeClose && beforeClose(draw.canvas.to, draw.canvas.line);
        ctx.closePath();
    },
    clear (ctx, width, height) {
        ctx.clearRect(0, 0, width, height);
    },
    fontString (pixelSize, fontStyle, fontFamily) {
        return fontStyle + " " + pixelSize + "px " + fontFamily;
    },
    longestText (ctx, font, arrayOfStrings) {
        ctx.font = font;
        var longest = 0;
        each(arrayOfStrings as index, string) {
            var textWidth = ctx.measureText(string).width;
            longest = (textWidth > longest) ? textWidth : longest;
        }
        return longest;
    },
    drawRoundedRectangle (ctx, x, y, width, height, radius) {
        ctx.beginPath();
        ctx.moveTo(x + radius, y);
        ctx.lineTo(x + width - radius, y);
        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
        ctx.lineTo(x + width, y + height - radius);
        ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
        ctx.lineTo(x + radius, y + height);
        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
        ctx.lineTo(x, y + radius);
        ctx.quadraticCurveTo(x, y, x + radius, y);
        ctx.closePath();
    },
    drawDashLine (ctx, x1, y1, x2, y2, dashLen) {
        dashLen = dashLen === undefined ? 5 : dashLen;
        //得到斜边的总长度  
        var beveling = getBeveling(x2 - x1, y2 - y1);
        //计算有多少个线段  
        var num = Math.floor(beveling / dashLen);

        for (var i = 0; i < num; i++) {
            ctx[i % 2 == 0 ? 'moveTo' : 'lineTo'](x1 + (x2 - x1) / num * i, y1 + (y2 - y1) / num * i);
        }
        ctx.stroke();
    },
    urlToBase64 (url, callback, mime) {
        var canvas = doc.createElement('CANVAS'),
            ctx = canvas.getctx('2d'),
            img = new Image;
        img.crossOrigin = 'Anonymous';
        img.onload = function() {
            canvas.height = img.height;
            canvas.width = img.width;
            ctx.drawImage(img, 0, 0);
            var dataURL = canvas.toDataURL(mime || 'image/png');
            callback.call(this, dataURL);
            canvas = null;
        };
        img.src = url;
    },
    fileToBlob (file) {
        return root.URL.createObjectURL(file);
    },
    fileToBase64 (file, callback) {
        var reader = new FileReader();
        reader.onload = function(e) {
            Base64URL = reader.result;
            _.util.isFn(callback) && callback.call(reader, Base64URL);
        };
        reader.readAsDataURL(file);
        return 0;
    }
}

this.module.exports = draw.canvas;