{
    "name": "Tang",
    "patterns": [{
            "match": "(new)\\s+(?:(?:(class)\\s+(\\w+(?:\\.\\w*)*)?)|(\\w+(?:\\.\\w*)*))",
            "name": "meta.class.instance.constructor.tang",
            "captures": {
                "1": {
                    "name": "keyword.operator.new.tang"
                },
                "2": {
                    "name": "storage.type.class.tang"
                },
                "3": {
                    "name": "entity.name.type.instance.tang"
                },
                "4": {
                    "name": "entity.name.type.instance.tang"
                }
            }
        },
        {
            "begin": "'''",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.tang"
                }
            },
            "end": "'''",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.tang"
                }
            },
            "name": "string.quoted.single.heredoc.tang",
            "patterns": [{
                "captures": {
                    "1": {
                        "name": "punctuation.definition.escape.backslash.tang"
                    }
                },
                "match": "(\\\\).",
                "name": "constant.character.escape.backslash.tang"
            }]
        },
        {
            "begin": "\"\"\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.tang"
                }
            },
            "end": "\"\"\"",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.tang"
                }
            },
            "name": "string.quoted.double.heredoc.tang",
            "patterns": [{
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.escape.backslash.tang"
                        }
                    },
                    "match": "(\\\\).",
                    "name": "constant.character.escape.backslash.tang"
                },
                {
                    "include": "#interpolated_tang"
                }
            ]
        },
        {
            "match": "(`)(.*)(`)",
            "name": "string.quoted.script.tang",
            "captures": {
                "1": {
                    "name": "punctuation.definition.string.begin.tang"
                },
                "2": {
                    "name": "source.js.embedded.tang",
                    "patterns": [{
                        "include": "source.js"
                    }]
                },
                "3": {
                    "name": "punctuation.definition.string.end.tang"
                }
            }
        },
        {
            "begin": "/\\*(\\*|\\!)?(?=\\s)",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.comment.tang"
                }
            },
            "end": "\\*/",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.comment.tang"
                }
            },
            "name": "comment.block.tang",
            "patterns": [{
                "match": "(?<=^|\\s)@\\w*(?=\\s)",
                "name": "storage.type.annotation.tang"
            }]
        },
        {
            "begin": "(^\\s+)?(?=//)",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.comment.tang"
                }
            },
            "end": "$",
            "name": "comment.line.double-slash.tang"
        },
        {
            "begin": "#",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.comment.tang"
                }
            },
            "end": "$",
            "name": "comment.line.sharp.tang"
        },
        {
            "begin": "@(module|include|ownprop|return)",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.comment.tang"
                }
            },
            "end": "$",
            "name": "comment.line.sharp.tang"
        },
        {
            "begin": "///",
            "end": "(///)[gimuy]*",
            "name": "string.regexp.multiline.tang",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.tang"
                }
            },
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.string.end.tang"
                }
            },
            "patterns": [{
                "include": "#heregexp"
            }]
        },
        {
            "begin": "(?<![\\w$])(/)(?=(?![/*+?])(.+)(/)[gimuy]*(?!\\s*[\\w$/(]))",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.string.begin.tang"
                }
            },
            "end": "(/)[gimuy]*(?!\\s*[\\w$/(])",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.string.end.tang"
                }
            },
            "name": "string.regexp.tang",
            "patterns": [{
                "include": "source.js.regexp"
            }]
        },
        {
            "match": "\\b(?<![\\.\\$])(break|by|catch|continue|else|finally|for|in|of|if|return|switch|then|throw|try|unless|when|while|until|loop|do|export|import|delete|typeof|default|from|as|yield|async|await(?<=for)\\s+own|use|each|namespace|ns|global|def|expands)(?!\\s*:)\\b",
            "name": "keyword.control.tang"
        },
        {
            "match": "\\b(?<![\\.\\$])(delete|instanceof|new|typeof)(?!\\s*:)\\b",
            "name": "keyword.operator.$1.tang"
        },
        {
            "match": "\\b(?<![\\.\\$])(case|function|var|void|with|const|let|enum|native|__hasProp|__extends|__slice|__bind|__indexOf|implements|interface|package|private|protected|public|static|om|get|set)(?!\\s*:)\\b",
            "name": "keyword.reserved.tang"
        },
        {
            "include": "#function_params"
        },
        {
            "begin": "(?<=\\s|^)({)(?=[^'\"#]+?}[\\s\\]}]*=)",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.destructuring.begin.bracket.curly.tang"
                }
            },
            "end": "}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.destructuring.end.bracket.curly.tang"
                }
            },
            "name": "meta.variable.assignment.destructured.object.tang",
            "patterns": [{
                    "include": "$self"
                },
                {
                    "match": "[a-zA-Z$_]\\w*",
                    "name": "variable.assignment.tang"
                }
            ]
        },
        {
            "begin": "(?<=\\s|^)(\\[)(?=[^'\"#]+?\\][\\s\\]}]*=)",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.destructuring.begin.bracket.square.tang"
                }
            },
            "end": "\\]",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.destructuring.end.bracket.square.tang"
                }
            },
            "name": "meta.variable.assignment.destructured.array.tang",
            "patterns": [{
                    "include": "$self"
                },
                {
                    "match": "[a-zA-Z$_]\\w*",
                    "name": "variable.assignment.tang"
                }
            ]
        },
        {
            "match": "\\b(?<!\\.|::)(true|on|yes)(?!\\s*[:=][^=])\\b",
            "name": "constant.language.boolean.true.tang"
        },
        {
            "match": "\\b(?<!\\.|::)(false|off|no)(?!\\s*[:=][^=])\\b",
            "name": "constant.language.boolean.false.tang"
        },
        {
            "match": "\\b(?<!\\.|::)null(?!\\s*[:=][^=])\\b",
            "name": "constant.language.null.tang"
        },
        {
            "match": "\\b(?<!\\.|::)extends(?!\\s*[:=])\\b",
            "name": "variable.language.tang"
        },
        {
            "match": "(?<!\\.)\\b(?<!\\$)(super|this|arguments|pandora)(?!\\s*[:=][^=]|\\$)\\b",
            "name": "variable.language.$1.tang"
        },
        {
            "captures": {
                "1": {
                    "name": "storage.type.class.tang"
                },
                "2": {
                    "name": "keyword.control.inheritance.tang"
                },
                "3": {
                    "name": "entity.other.inherited-class.tang"
                }
            },
            "match": "(?<=\\s|^|\\[|\\()(class)\\s+(extends)\\s+(@?[a-zA-Z\\$\\._][\\w\\.]*)",
            "name": "meta.class.tang"
        },
        {
            "captures": {
                "1": {
                    "name": "storage.type.class.tang"
                },
                "2": {
                    "name": "entity.name.type.class.tang"
                },
                "3": {
                    "name": "keyword.control.inheritance.tang"
                },
                "4": {
                    "name": "entity.other.inherited-class.tang"
                }
            },
            "match": "(?<=\\s|^|\\[|\\()(class\\b)\\s+(@?[a-zA-Z\\$_][\\w\\.]*)?(?:\\s+(extends)\\s+(@?[a-zA-Z\\$\\._][\\w\\.]*))?",
            "name": "meta.class.tang"
        },
        {
            "match": "\\b(debugger|\\\\)\\b",
            "name": "keyword.other.tang"
        },
        {
            "match": "\\b(Array|ArrayBuffer|Blob|Boolean|Date|document|Function|Int(8|16|32|64)Array|Math|Map|Number|Object|Proxy|RegExp|Set|String|WeakMap|window|Uint(8|16|32|64)Array|XMLHttpRequest|tangram|declare|root|imports|storage)\\b",
            "name": "support.class.tang"
        },
        {
            "match": "\\b(console)\\b",
            "name": "entity.name.type.object.tang"
        },
        {
            "match": "((?<=console\\.)(debug|warn|info|log|error|time|timeEnd|assert))\\b",
            "name": "support.function.console.tang"
        },
        {
            "match": "((?<=\\.)(apply|call|concat|every|filter|forEach|from|hasOwnProperty|indexOf|isPrototypeOf|join|lastIndexOf|map|of|pop|propertyIsEnumerable|push|reduce(Right)?|reverse|shift|slice|some|sort|splice|to(Locale)?String|unshift|valueOf))\\b",
            "name": "support.function.method.array.tang"
        },
        {
            "match": "((?<=Array\\.)(isArray))\\b",
            "name": "support.function.static.array.tang"
        },
        {
            "match": "((?<=Object\\.)(create|definePropert(ies|y)|freeze|getOwnProperty(Descriptors?|Names)|getProperty(Descriptor|Names)|getPrototypeOf|is(Extensible|Frozen|Sealed)?|isnt|keys|preventExtensions|seal))\\b",
            "name": "support.function.static.object.tang"
        },
        {
            "match": "((?<=Math\\.)(abs|acos|acosh|asin|asinh|atan|atan2|atanh|ceil|cos|cosh|exp|expm1|floor|hypot|log|log10|log1p|log2|max|min|pow|random|round|sign|sin|sinh|sqrt|tan|tanh|trunc))\\b",
            "name": "support.function.static.math.tang"
        },
        {
            "match": "((?<=Number\\.)(is(Finite|Integer|NaN)|toInteger))\\b",
            "name": "support.function.static.number.tang"
        },
        {
            "match": "(?<!\\.)\\b(module|exports|__filename|__dirname|global|process)(?!\\s*:)\\b",
            "name": "support.variable.tang"
        },
        {
            "match": "\\b(Infinity|NaN|undefined)\\b",
            "name": "constant.language.tang"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#method_calls"
        },
        {
            "include": "#function_calls"
        },
        {
            "include": "#numbers"
        },
        {
            "include": "#objects"
        },
        {
            "include": "#properties"
        },
        {
            "match": "::",
            "name": "keyword.operator.prototype.tang"
        },
        {
            "match": "(?<!\\$)\\b[0-9]+[\\w$]*",
            "name": "invalid.illegal.identifier.tang"
        },
        {
            "match": ";",
            "name": "punctuation.terminator.statement.tang"
        },
        {
            "match": ",",
            "name": "punctuation.separator.delimiter.tang"
        },
        {
            "begin": "{",
            "beginCaptures": {
                "0": {
                    "name": "meta.brace.curly.tang"
                }
            },
            "end": "}",
            "endCaptures": {
                "0": {
                    "name": "meta.brace.curly.tang"
                }
            },
            "patterns": [{
                "include": "$self"
            }]
        },
        {
            "begin": "\\[",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.array.begin.bracket.square.tang"
                }
            },
            "end": "\\]",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.array.end.bracket.square.tang"
                }
            },
            "patterns": [{
                    "match": "(?<!\\.)\\.{3}",
                    "name": "keyword.operator.slice.exclusive.tang"
                },
                {
                    "match": "(?<!\\.)\\.{2}",
                    "name": "keyword.operator.slice.inclusive.tang"
                },
                {
                    "include": "$self"
                }
            ]
        },
        {
            "begin": "\\(",
            "beginCaptures": {
                "0": {
                    "name": "meta.brace.round.tang"
                }
            },
            "end": "\\)",
            "endCaptures": {
                "0": {
                    "name": "meta.brace.round.tang"
                }
            },
            "patterns": [{
                "include": "$self"
            }]
        },
        {
            "include": "#instance_variable"
        },
        {
            "include": "#single_quoted_string"
        },
        {
            "include": "#double_quoted_string"
        }
    ],
    "repository": {
        "arguments": {
            "patterns": [{
                    "begin": "\\(",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.arguments.begin.bracket.round.tang"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.arguments.end.bracket.round.tang"
                        }
                    },
                    "name": "meta.arguments.tang",
                    "patterns": [{
                        "include": "$self"
                    }]
                },
                {
                    "begin": "(?=(@|@?[\\w$]+|[=-]>|\\-\\d|\\[|{|\"|'))",
                    "end": "(?=\\s*(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof|as)(?![\\w$]))|(?=\\s*(}|\\]|\\)|#|$))",
                    "name": "meta.arguments.tang",
                    "patterns": [{
                        "include": "$self"
                    }]
                }
            ]
        },
        "double_quoted_string": {
            "patterns": [{
                "begin": "\"",
                "beginCaptures": {
                    "0": {
                        "name": "punctuation.definition.string.begin.tang"
                    }
                },
                "end": "\"",
                "endCaptures": {
                    "0": {
                        "name": "punctuation.definition.string.end.tang"
                    }
                },
                "name": "string.quoted.double.tang",
                "patterns": [{
                        "captures": {
                            "1": {
                                "name": "punctuation.definition.escape.backslash.tang"
                            }
                        },
                        "match": "(\\\\)(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]|37[0-7]?|[4-7][0-7]?|.)",
                        "name": "constant.character.escape.backslash.tang"
                    },
                    {
                        "include": "#interpolated_tang"
                    }
                ]
            }]
        },
        "function_calls": {
            "patterns": [{
                    "begin": "(@)?([\\w$]+)\\s*(?=\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "variable.other.readwrite.instance.tang"
                        },
                        "2": {
                            "patterns": [{
                                "include": "#function_names"
                            }]
                        }
                    },
                    "end": "(?<=\\))",
                    "name": "meta.function-call.tang",
                    "patterns": [{
                        "include": "#arguments"
                    }]
                },
                {
                    "begin": "(?x)\n(@)?([\\w$]+)\n\\s*\n(?=\\s+(?!(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof|as)(?![\\w$]))(?=(@?[\\w$]+|[=-]>|\\-\\d|\\[|{|\"|')))",
                    "beginCaptures": {
                        "1": {
                            "name": "variable.other.readwrite.instance.tang"
                        },
                        "2": {
                            "patterns": [{
                                "include": "#function_names"
                            }]
                        }
                    },
                    "end": "(?=\\s*(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof|as)(?![\\w$]))|(?=\\s*(}|\\]|\\)|#|$))",
                    "name": "meta.function-call.tang",
                    "patterns": [{
                        "include": "#arguments"
                    }]
                }
            ]
        },
        "function_names": {
            "patterns": [{
                    "match": "(?x)\n\\b(isNaN|isFinite|eval|uneval|parseInt|parseFloat|decodeURI|\ndecodeURIComponent|encodeURI|encodeURIComponent|escape|unescape|\nrequire|set(Interval|Timeout)|clear(Interval|Timeout))\\b",
                    "name": "support.function.tang"
                },
                {
                    "match": "[a-zA-Z_$][\\w$]*",
                    "name": "entity.name.function.tang"
                },
                {
                    "match": "\\d[\\w$]*",
                    "name": "invalid.illegal.identifier.tang"
                }
            ]
        },
        "embedded_comment": {
            "patterns": [{
                "captures": {
                    "1": {
                        "name": "punctuation.definition.comment.tang"
                    }
                },
                "match": "(?<!\\\\)(#).*$\\n?",
                "name": "comment.line.double-slash.tang"
            }]
        },
        "instance_variable": {
            "patterns": [{
                "match": "(@)([a-zA-Z_\\$]\\w*)?",
                "name": "variable.other.readwrite.instance.tang"
            }]
        },
        "interpolated_tang": {
            "patterns": [{
                "begin": "\\#\\{",
                "captures": {
                    "0": {
                        "name": "punctuation.section.embedded.tang"
                    }
                },
                "end": "\\}",
                "name": "source.tang.embedded.source",
                "patterns": [{
                    "include": "$self"
                }]
            }]
        },
        "method_calls": {
            "patterns": [{
                    "begin": "(?:(\\.)|(::))\\s*([\\w$]+)\\s*(?=\\()",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.separator.method.period.tang"
                        },
                        "2": {
                            "name": "keyword.operator.prototype.tang"
                        },
                        "3": {
                            "patterns": [{
                                "include": "#method_names"
                            }]
                        }
                    },
                    "end": "(?<=\\))",
                    "name": "meta.method-call.tang",
                    "patterns": [{
                        "include": "#arguments"
                    }]
                },
                {
                    "begin": "(?:(\\.)|(::))\\s*([\\w$]+)\\s*(?=\\s+(?!(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof|as)(?![\\w$]))(?=(@|@?[\\w$]+|[=-]>|\\-\\d|\\[|{|\"|')))",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.separator.method.period.tang"
                        },
                        "2": {
                            "name": "keyword.operator.prototype.tang"
                        },
                        "3": {
                            "patterns": [{
                                "include": "#method_names"
                            }]
                        }
                    },
                    "end": "(?=\\s*(?<![\\w$])(of|in|then|is|isnt|and|or|for|else|when|if|unless|by|instanceof|as)(?![\\w$]))|(?=\\s*(}|\\]|\\)|#|$))",
                    "name": "meta.method-call.tang",
                    "patterns": [{
                        "include": "#arguments"
                    }]
                }
            ]
        },
        "method_names": {
            "patterns": [{
                    "match": "(?x)\n\\bon(Rowsinserted|Rowsdelete|Rowenter|Rowexit|Resize|Resizestart|Resizeend|Reset|\nReadystatechange|Mouseout|Mouseover|Mousedown|Mouseup|Mousemove|\nBefore(cut|deactivate|unload|update|paste|print|editfocus|activate)|\nBlur|Scrolltop|Submit|Select|Selectstart|Selectionchange|Hover|Help|\nChange|Contextmenu|Controlselect|Cut|Cellchange|Clock|Close|Deactivate|\nDatasetchanged|Datasetcomplete|Dataavailable|Drop|Drag|Dragstart|Dragover|\nDragdrop|Dragenter|Dragend|Dragleave|Dblclick|Unload|Paste|Propertychange|Error|\nErrorupdate|Keydown|Keyup|Keypress|Focus|Load|Activate|Afterupdate|Afterprint|Abort)\\b",
                    "name": "support.function.event-handler.tang"
                },
                {
                    "match": "(?x)\n\\b(shift|showModelessDialog|showModalDialog|showHelp|scroll|scrollX|scrollByPages|\nscrollByLines|scrollY|scrollTo|stop|strike|sizeToContent|sidebar|signText|sort|\nsup|sub|substr|substring|splice|split|send|set(Milliseconds|Seconds|Minutes|Hours|\nMonth|Year|FullYear|Date|UTC(Milliseconds|Seconds|Minutes|Hours|Month|FullYear|Date)|\nTime|Hotkeys|Cursor|ZOptions|Active|Resizable|RequestHeader)|search|slice|\nsavePreferences|small|home|handleEvent|navigate|char|charCodeAt|charAt|concat|\ncontextual|confirm|compile|clear|captureEvents|call|createStyleSheet|createPopup|\ncreateEventObject|to(GMTString|UTCString|String|Source|UpperCase|LowerCase|LocaleString)|\ntest|taint|taintEnabled|indexOf|italics|disableExternalCapture|dump|detachEvent|unshift|\nuntaint|unwatch|updateCommands|join|javaEnabled|pop|push|plugins.refresh|paddings|parse|\nprint|prompt|preference|enableExternalCapture|exec|execScript|valueOf|UTC|find|file|\nfileModifiedDate|fileSize|fileCreatedDate|fileUpdatedDate|fixed|fontsize|fontcolor|\nforward|fromCharCode|watch|link|load|lastIndexOf|anchor|attachEvent|atob|apply|alert|\nabort|routeEvents|resize|resizeBy|resizeTo|recalc|returnValue|replace|reverse|reload|\nreleaseCapture|releaseEvents|go|get(Milliseconds|Seconds|Minutes|Hours|Month|Day|Year|FullYear|\nTime|Date|TimezoneOffset|UTC(Milliseconds|Seconds|Minutes|Hours|Day|Month|FullYear|Date)|\nAttention|Selection|ResponseHeader|AllResponseHeaders)|moveBy|moveBelow|moveTo|\nmoveToAbsolute|moveAbove|mergeAttributes|match|margins|btoa|big|bold|borderWidths|blink|back)\\b",
                    "name": "support.function.tang"
                },
                {
                    "match": "(?x)\n\\b(acceptNode|add|addEventListener|addTextTrack|adoptNode|after|animate|append|\nappendChild|appendData|before|blur|canPlayType|captureStream|\ncaretPositionFromPoint|caretRangeFromPoint|checkValidity|clear|click|\ncloneContents|cloneNode|cloneRange|close|closest|collapse|\ncompareBoundaryPoints|compareDocumentPosition|comparePoint|contains|\nconvertPointFromNode|convertQuadFromNode|convertRectFromNode|createAttribute|\ncreateAttributeNS|createCaption|createCDATASection|createComment|\ncreateContextualFragment|createDocument|createDocumentFragment|\ncreateDocumentType|createElement|createElementNS|createEntityReference|\ncreateEvent|createExpression|createHTMLDocument|createNodeIterator|\ncreateNSResolver|createProcessingInstruction|createRange|createShadowRoot|\ncreateTBody|createTextNode|createTFoot|createTHead|createTreeWalker|delete|\ndeleteCaption|deleteCell|deleteContents|deleteData|deleteRow|deleteTFoot|\ndeleteTHead|detach|disconnect|dispatchEvent|elementFromPoint|elementsFromPoint|\nenableStyleSheetsForSet|entries|evaluate|execCommand|exitFullscreen|\nexitPointerLock|expand|extractContents|fastSeek|firstChild|focus|forEach|get|\ngetAll|getAnimations|getAttribute|getAttributeNames|getAttributeNode|\ngetAttributeNodeNS|getAttributeNS|getBoundingClientRect|getBoxQuads|\ngetClientRects|getContext|getDestinationInsertionPoints|getElementById|\ngetElementsByClassName|getElementsByName|getElementsByTagName|\ngetElementsByTagNameNS|getItem|getNamedItem|getSelection|getStartDate|\ngetVideoPlaybackQuality|has|hasAttribute|hasAttributeNS|hasAttributes|\nhasChildNodes|hasFeature|hasFocus|importNode|initEvent|insertAdjacentElement|\ninsertAdjacentHTML|insertAdjacentText|insertBefore|insertCell|insertData|\ninsertNode|insertRow|intersectsNode|isDefaultNamespace|isEqualNode|\nisPointInRange|isSameNode|item|key|keys|lastChild|load|lookupNamespaceURI|\nlookupPrefix|matches|move|moveAttribute|moveAttributeNode|moveChild|\nmoveNamedItem|namedItem|nextNode|nextSibling|normalize|observe|open|\nparentNode|pause|play|postMessage|prepend|preventDefault|previousNode|\npreviousSibling|probablySupportsContext|queryCommandEnabled|\nqueryCommandIndeterm|queryCommandState|queryCommandSupported|queryCommandValue|\nquerySelector|querySelectorAll|registerContentHandler|registerElement|\nregisterProtocolHandler|releaseCapture|releaseEvents|remove|removeAttribute|\nremoveAttributeNode|removeAttributeNS|removeChild|removeEventListener|\nremoveItem|replace|replaceChild|replaceData|replaceWith|reportValidity|\nrequestFullscreen|requestPointerLock|reset|scroll|scrollBy|scrollIntoView|\nscrollTo|seekToNextFrame|select|selectNode|selectNodeContents|set|setAttribute|\nsetAttributeNode|setAttributeNodeNS|setAttributeNS|setCapture|\nsetCustomValidity|setEnd|setEndAfter|setEndBefore|setItem|setNamedItem|\nsetRangeText|setSelectionRange|setSinkId|setStart|setStartAfter|setStartBefore|\nslice|splitText|stepDown|stepUp|stopImmediatePropagation|stopPropagation|\nsubmit|substringData|supports|surroundContents|takeRecords|terminate|toBlob|\ntoDataURL|toggle|toString|values|write|writeln)\\b",
                    "name": "support.function.dom.tang"
                },
                {
                    "match": "[a-zA-Z_$][\\w$]*",
                    "name": "entity.name.function.tang"
                },
                {
                    "match": "\\d[\\w$]*",
                    "name": "invalid.illegal.identifier.tang"
                }
            ]
        },
        "numbers": {
            "patterns": [{
                    "match": "\\b(?<!\\$)0(x|X)[0-9a-fA-F]+\\b(?!\\$)",
                    "name": "constant.numeric.hex.tang"
                },
                {
                    "match": "\\b(?<!\\$)0(b|B)[01]+\\b(?!\\$)",
                    "name": "constant.numeric.binary.tang"
                },
                {
                    "match": "\\b(?<!\\$)0(o|O)?[0-7]+\\b(?!\\$)",
                    "name": "constant.numeric.octal.tang"
                },
                {
                    "match": "(?x)\n(?<!\\$)(?:\n  (?:\\b[0-9]+(\\.)[0-9]+[eE][+-]?[0-9]+\\b)| # 1.1E+3\n  (?:\\b[0-9]+(\\.)[eE][+-]?[0-9]+\\b)|       # 1.E+3\n  (?:\\B(\\.)[0-9]+[eE][+-]?[0-9]+\\b)|       # .1E+3\n  (?:\\b[0-9]+[eE][+-]?[0-9]+\\b)|            # 1E+3\n  (?:\\b[0-9]+(\\.)[0-9]+\\b)|                # 1.1\n  (?:\\b[0-9]+(?=\\.{2,3}))|                  # 1 followed by a slice\n  (?:\\b[0-9]+(\\.)\\B)|                      # 1.\n  (?:\\B(\\.)[0-9]+\\b)|                      # .1\n  (?:\\b[0-9]+\\b(?!\\.))                     # 1\n)(?!\\$)",
                    "captures": {
                        "0": {
                            "name": "constant.numeric.decimal.tang"
                        },
                        "1": {
                            "name": "punctuation.separator.decimal.period.tang"
                        },
                        "2": {
                            "name": "punctuation.separator.decimal.period.tang"
                        },
                        "3": {
                            "name": "punctuation.separator.decimal.period.tang"
                        },
                        "4": {
                            "name": "punctuation.separator.decimal.period.tang"
                        },
                        "5": {
                            "name": "punctuation.separator.decimal.period.tang"
                        },
                        "6": {
                            "name": "punctuation.separator.decimal.period.tang"
                        }
                    }
                }
            ]
        },
        "objects": {
            "patterns": [{
                    "match": "[A-Z][A-Z0-9_$]*(?=\\s*\\??(\\.\\s*[a-zA-Z_$]\\w*|::))",
                    "name": "constant.other.object.tang"
                },
                {
                    "match": "[a-zA-Z_$][\\w$]*(?=\\s*\\??(\\.\\s*[a-zA-Z_$]\\w*|::))",
                    "name": "variable.other.object.tang"
                }
            ]
        },
        "operators": {
            "patterns": [{
                    "match": "(?:([a-zA-Z$_][\\w$]*)?\\s+|(?<![\\w$]))(and=|or=)",
                    "captures": {
                        "1": {
                            "name": "variable.assignment.tang"
                        },
                        "2": {
                            "name": "keyword.operator.assignment.compound.tang"
                        }
                    }
                },
                {
                    "match": "([a-zA-Z$_][\\w$]*)?\\s*(%=|\\+=|-=|\\*=|&&=|\\|\\|=|\\?=|(?<!\\()/=)",
                    "captures": {
                        "1": {
                            "name": "variable.assignment.tang"
                        },
                        "2": {
                            "name": "keyword.operator.assignment.compound.tang"
                        }
                    }
                },
                {
                    "match": "([a-zA-Z$_][\\w$]*)?\\s*(&=|\\^=|<<=|>>=|>>>=|\\|=)",
                    "captures": {
                        "1": {
                            "name": "variable.assignment.tang"
                        },
                        "2": {
                            "name": "keyword.operator.assignment.compound.bitwise.tang"
                        }
                    }
                },
                {
                    "match": "<<|>>>|>>",
                    "name": "keyword.operator.bitwise.shift.tang"
                },
                {
                    "match": "!=|<=|>=|==|<|>",
                    "name": "keyword.operator.comparison.tang"
                },
                {
                    "match": "&&|!|\\|\\|",
                    "name": "keyword.operator.logical.tang"
                },
                {
                    "match": "&|\\||\\^|~",
                    "name": "keyword.operator.bitwise.tang"
                },
                {
                    "match": "([a-zA-Z$_][\\w$]*)?\\s*(=|:(?!:))(?![>=])",
                    "captures": {
                        "1": {
                            "name": "variable.assignment.tang"
                        },
                        "2": {
                            "name": "keyword.operator.assignment.tang"
                        }
                    }
                },
                {
                    "match": "--",
                    "name": "keyword.operator.decrement.tang"
                },
                {
                    "match": "\\+\\+",
                    "name": "keyword.operator.increment.tang"
                },
                {
                    "match": "\\.\\.\\.",
                    "name": "keyword.operator.splat.tang"
                },
                {
                    "match": "\\?",
                    "name": "keyword.operator.existential.tang"
                },
                {
                    "match": "%|\\*|/|-|\\+",
                    "name": "keyword.operator.tang"
                },
                {
                    "match": "(?x)\n\\b(?<![\\.\\$])\n(?:\n  (and|or|not) # logical\n  |\n  (is|isnt) # comparison\n)\n(?!\\s*:)\\b",
                    "captures": {
                        "1": {
                            "name": "keyword.operator.logical.tang"
                        },
                        "2": {
                            "name": "keyword.operator.comparison.tang"
                        }
                    }
                }
            ]
        },
        "properties": {
            "patterns": [{
                    "match": "(?:(\\.)|(::))\\s*([A-Z][A-Z0-9_$]*\\b\\$*)(?=\\s*\\??(\\.\\s*[a-zA-Z_$]\\w*|::))",
                    "captures": {
                        "1": {
                            "name": "punctuation.separator.property.period.tang"
                        },
                        "2": {
                            "name": "keyword.operator.prototype.tang"
                        },
                        "3": {
                            "name": "constant.other.object.property.tang"
                        }
                    }
                },
                {
                    "match": "(?:(\\.)|(::))\\s*(\\$*[a-zA-Z_$][\\w$]*)(?=\\s*\\??(\\.\\s*[a-zA-Z_$]\\w*|::))",
                    "captures": {
                        "1": {
                            "name": "punctuation.separator.property.period.tang"
                        },
                        "2": {
                            "name": "keyword.operator.prototype.tang"
                        },
                        "3": {
                            "name": "variable.other.object.property.tang"
                        }
                    }
                },
                {
                    "match": "(?:(\\.)|(::))\\s*([A-Z][A-Z0-9_$]*\\b\\$*)",
                    "captures": {
                        "1": {
                            "name": "punctuation.separator.property.period.tang"
                        },
                        "2": {
                            "name": "keyword.operator.prototype.tang"
                        },
                        "3": {
                            "name": "constant.other.property.tang"
                        }
                    }
                },
                {
                    "match": "(?:(\\.)|(::))\\s*(\\$*[a-zA-Z_$][\\w$]*)",
                    "captures": {
                        "1": {
                            "name": "punctuation.separator.property.period.tang"
                        },
                        "2": {
                            "name": "keyword.operator.prototype.tang"
                        },
                        "3": {
                            "name": "variable.other.property.tang"
                        }
                    }
                },
                {
                    "match": "(?:(\\.)|(::))\\s*([0-9][\\w$]*)",
                    "captures": {
                        "1": {
                            "name": "punctuation.separator.property.period.tang"
                        },
                        "2": {
                            "name": "keyword.operator.prototype.tang"
                        },
                        "3": {
                            "name": "invalid.illegal.identifier.tang"
                        }
                    }
                }
            ]
        },
        "single_quoted_string": {
            "patterns": [{
                "begin": "'",
                "beginCaptures": {
                    "0": {
                        "name": "punctuation.definition.string.begin.tang"
                    }
                },
                "end": "'",
                "endCaptures": {
                    "0": {
                        "name": "punctuation.definition.string.end.tang"
                    }
                },
                "name": "string.quoted.single.tang",
                "patterns": [{
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.escape.backslash.tang"
                        }
                    },
                    "match": "(\\\\)(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)",
                    "name": "constant.character.escape.backslash.tang"
                }]
            }]
        },
        "regex-character-class": {
            "patterns": [{
                    "match": "\\\\[wWsSdD]|\\.",
                    "name": "constant.character.character-class.regexp"
                },
                {
                    "match": "\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})",
                    "name": "constant.character.numeric.regexp"
                },
                {
                    "match": "\\\\c[A-Z]",
                    "name": "constant.character.control.regexp"
                },
                {
                    "match": "\\\\.",
                    "name": "constant.character.escape.backslash.regexp"
                }
            ]
        },
        "heregexp": {
            "patterns": [{
                    "match": "\\\\[bB]|\\^|\\$",
                    "name": "keyword.control.anchor.regexp"
                },
                {
                    "match": "\\\\[1-9]\\d*",
                    "name": "keyword.other.back-reference.regexp"
                },
                {
                    "match": "[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??",
                    "name": "keyword.operator.quantifier.regexp"
                },
                {
                    "match": "\\|",
                    "name": "keyword.operator.or.regexp"
                },
                {
                    "begin": "(\\()((\\?=)|(\\?!))",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.group.regexp"
                        },
                        "3": {
                            "name": "meta.assertion.look-ahead.regexp"
                        },
                        "4": {
                            "name": "meta.assertion.negative-look-ahead.regexp"
                        }
                    },
                    "end": "(\\))",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.group.regexp"
                        }
                    },
                    "name": "meta.group.assertion.regexp",
                    "patterns": [{
                        "include": "#heregexp"
                    }]
                },
                {
                    "begin": "\\((\\?:)?",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.group.regexp"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.group.regexp"
                        }
                    },
                    "name": "meta.group.regexp",
                    "patterns": [{
                        "include": "#heregexp"
                    }]
                },
                {
                    "begin": "(\\[)(\\^)?",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.character-class.regexp"
                        },
                        "2": {
                            "name": "keyword.operator.negation.regexp"
                        }
                    },
                    "end": "(\\])",
                    "endCaptures": {
                        "1": {
                            "name": "punctuation.definition.character-class.regexp"
                        }
                    },
                    "name": "constant.other.character-class.set.regexp",
                    "patterns": [{
                            "captures": {
                                "1": {
                                    "name": "constant.character.numeric.regexp"
                                },
                                "2": {
                                    "name": "constant.character.control.regexp"
                                },
                                "3": {
                                    "name": "constant.character.escape.backslash.regexp"
                                },
                                "4": {
                                    "name": "constant.character.numeric.regexp"
                                },
                                "5": {
                                    "name": "constant.character.control.regexp"
                                },
                                "6": {
                                    "name": "constant.character.escape.backslash.regexp"
                                }
                            },
                            "match": "(?:.|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))",
                            "name": "constant.other.character-class.range.regexp"
                        },
                        {
                            "include": "#regex-character-class"
                        }
                    ]
                },
                {
                    "include": "#regex-character-class"
                },
                {
                    "include": "#interpolated_tang"
                },
                {
                    "include": "#embedded_comment"
                }
            ]
        }
    },
    "scopeName": "source.tang"
}